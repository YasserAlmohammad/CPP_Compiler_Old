/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 101
#define YY_END_OF_BUFFER 102
static yyconst short int yy_accept[272] =
    {   0,
        0,    0,   13,   13,    0,    0,    3,    3,    0,    0,
        0,    0,    0,    0,    0,    0,  102,  100,   98,   99,
       71,  100,   60,   66,  100,   57,   58,   67,   68,   59,
       69,   65,   72,   53,   78,   79,   73,   80,   74,   77,
       52,   52,   63,   64,   75,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       61,   76,   62,   70,   13,   15,   14,  101,   18,  101,
        3,    4,    8,    2,    5,    7,    6,    9,   11,   10,
       88,    0,   56,    0,    0,   93,    0,    0,   91,   83,
       89,   84,   90,   82,   54,   12,   97,   92,   54,   53,

        0,   81,   95,   85,   87,   86,   96,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   25,   52,   52,   52,
       52,   52,   30,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   94,   13,   14,   14,
       16,   18,    0,    4,    3,    8,    5,    9,   10,    0,
        0,   55,    0,    0,   97,    0,   54,   52,   52,   52,
       52,   19,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   29,   52,   52,   31,   42,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,    0,    0,
        0,    0,   54,   51,   50,   52,   22,   52,   52,   52,

       20,   52,   52,   52,   27,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   47,   49,   52,   52,   37,
       52,    0,    0,    0,   21,   17,   23,   52,   52,   52,
       52,   52,   48,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   36,   38,    0,   52,   24,   39,   26,   28,
       40,   41,   52,   52,   52,   46,   32,   34,   52,    0,
       52,   52,   45,   52,   35,    1,   33,   43,   52,   44,
        0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    1,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,   23,    1,   24,   24,   24,   24,   25,   24,
       26,   26,   26,   26,   26,   27,   26,   28,   26,   26,
       26,   26,   26,   26,   29,   26,   26,   26,   26,   26,
       30,   31,   32,   33,   26,    1,   34,   35,   36,   37,

       38,   39,   26,   40,   41,   26,   42,   43,   26,   44,
       45,   46,   26,   47,   48,   49,   50,   51,   52,   53,
       54,   26,   55,   56,   57,   58,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[59] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    5,    1,    1,
        6,    1,    1,    1,    1,    1,    7,    1,    1,    2,
        1,    8,    9,    7,    7,   10,   10,   10,   10,    1,
        9,    1,    1,   11,   11,    7,    7,    7,   11,   10,
       10,   10,   10,   12,   10,   10,   12,   10,   12,   10,
       12,   10,   12,   10,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[290] =
    {   0,
        0,    0,   56,   57,   68,    0,  125,  129,  126,  130,
      150,    0,   58,   59,  132,  133,  571,  573,  573,  573,
      549,  134,  528,  559,  534,  573,  573,  543,  129,  573,
      137,  536,  145,  145,  530,  573,   45,  525,  121,  573,
        0,  516,  573,  573,  573,   99,  128,  102,  114,  171,
      167,  506,  493,  160,  499,  487,  168,  491,  479,  483,
      573,  460,  573,  573,    0,  573,  198,  573,    0,  508,
      498,  573,  493,  573,    0,  573,  573,    0,  573,  488,
      573,  207,  573,  439,  437,  573,  205,  419,  573,  573,
      573,  573,  573,  573,  202,  573,    0,  573,  203,  206,

      212,  573,  573,  573,  573,  573,  573,    0,  442,  418,
      424,  419,  407,  405,  189,  191,  332,  333,  330,  335,
      330,  335,    0,  194,  323,  334,  201,  336,  321,  335,
      327,  317,  319,  327,  322,  321,  573,    0,  234,  236,
      573,    0,  358,  573,  358,  354,    0,    0,  353,    0,
      314,  573,    0,  237,    0,  332,  330,  319,  302,  310,
      296,    0,  292,  115,  290,  297,  299,  301,  297,  295,
      284,    0,  293,  289,    0,    0,  282,  277,  278,  283,
      275,  275,  275,  277,  276,  274,  274,  267,  250,  266,
      282,  291,  288,    0,    0,  262,    0,  255,  253,  260,

        0,  256,  249,  254,    0,  249,  257,  250,  249,  258,
      257,  245,  241,  233,  238,    0,    0,  241,  238,    0,
      238,  317,  223,  349,    0,    0,    0,  228,  233,  232,
      231,  224,    0,  229,  227,  215,  214,  226,  225,  216,
      223,  220,    0,    0,  220,  206,    0,    0,    0,    0,
        0,    0,  208,  210,  186,    0,    0,    0,  193,  187,
      179,  135,    0,  143,    0,  573,    0,    0,  143,    0,
      573,  388,  400,  412,  424,  436,  448,  454,  466,  478,
      484,  496,  508,  520,  529,  538,  550,  556,  561
    } ;

static yyconst short int yy_def[290] =
    {   0,
      271,    1,  272,  272,  271,    5,  273,  273,  274,  274,
        5,   11,  275,  275,   11,   11,  271,  271,  271,  271,
      271,  276,  271,  271,  277,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      278,  278,  271,  271,  271,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      271,  271,  271,  271,  279,  271,  280,  271,  281,  282,
      271,  271,  271,  271,  283,  271,  271,  284,  271,  271,
      271,  276,  271,  285,  271,  271,  277,  286,  271,  271,
      271,  271,  271,  271,  271,  271,  287,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  271,  279,  280,  280,
      271,  281,  282,  271,  271,  271,  283,  284,  271,  288,
      271,  271,  289,  271,  287,  271,  271,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  276,  271,
      277,  271,  271,  278,  278,  278,  278,  278,  278,  278,

      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  276,  271,  277,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  271,  278,  278,  278,  278,  278,
      278,  278,  278,  278,  278,  278,  278,  278,  278,  271,
      278,  278,  278,  278,  278,  271,  278,  278,  278,  278,
        0,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271
    } ;

static yyconst short int yy_nxt[632] =
    {   0,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   41,   41,   41,   42,   41,   43,
       18,   44,   45,   41,   46,   47,   48,   49,   50,   41,
       51,   41,   41,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   41,   41,   61,   62,   63,   64,   66,   66,
       68,   68,   68,   68,  103,  104,   67,   67,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   69,   69,   69,   69,   69,   69,   68,   68,   68,

       68,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   68,   68,   68,   68,   71,   72,   68,   73,
       71,   72,   68,   73,   79,   79,   80,   80,   83,  116,
       90,  106,  107,  110,   74,  111,  117,   68,   74,   91,
       92,   68,   76,   68,   68,   96,  118,   93,   94,   99,
       97,  100,  199,  200,   84,   98,  119,  112,  113,  101,
      114,   77,  115,   68,   68,   68,   68,   68,   68,  270,
      269,  268,  101,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,  120,  123,  127,  131,  140,  128,
      124,   83,  152,  141,  132,  121,  267,  122,   95,   95,
       99,  133,  100,  156,  266,  156,  154,  154,  157,  166,
      101,  265,  164,  167,  264,   88,  174,   84,  165,  154,
      154,  178,  175,  101,  271,  179,  140,  263,  192,  271,
      192,  141,  262,  193,   83,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  222,  250,  249,  248,
      247,  246,  245,  222,  222,  244,  243,  242,  241,  240,
       84,  239,  238,  222,  222,  222,  222,  222,  222,  152,
      237,  236,  235,  234,  233,  232,  231,  230,  224,  229,

      228,  227,  226,  225,  193,  224,  224,  193,  223,  221,
      220,  219,   88,  218,  217,  224,  224,  224,  224,  224,
      224,   83,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  222,  205,  204,  203,  202,  201,  198,
      222,  222,  197,  196,  195,  194,  157,   84,  157,  190,
      222,  222,  222,  222,  222,  222,  152,  149,  146,  145,
      144,  188,  187,  186,  185,  224,  184,  183,  182,  181,
      180,  177,  224,  224,  176,  173,  172,  171,  170,   88,
      169,  168,  224,  224,  224,  224,  224,  224,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   82,   82,  163,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   87,   87,
      162,   87,  161,   87,   87,   87,   87,   87,   87,   87,
      108,  160,  159,  108,  108,  108,  138,  138,  158,  138,
      138,  153,  138,  138,  138,  138,  138,  138,  139,  139,
      151,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      142,  150,  149,  142,  142,  142,  143,  146,  143,  145,

      143,  143,  143,  143,  143,  143,  143,  143,  147,  147,
      144,  147,  147,  147,  147,  137,  147,  147,  147,  147,
      148,  148,  136,  135,  148,  148,  148,  148,  148,  148,
      148,  148,   82,   82,  134,  130,  129,   82,  126,   82,
       82,   87,   87,  125,  109,  105,   87,  102,   87,   87,
      155,  155,   95,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  189,   89,   88,   86,  189,  191,   85,   81,
      271,  191,   17,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271
    } ;

static yyconst short int yy_chk[632] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    3,    4,
       13,   14,   13,   14,   37,   37,    3,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    7,    7,    9,    7,
        8,    8,   10,    8,   15,   16,   15,   16,   22,   48,
       29,   39,   39,   46,    7,   46,   48,    9,    8,   29,
       31,   10,   11,   15,   16,   33,   49,   31,   31,   34,
       33,   34,  164,  164,   22,   33,   49,   47,   47,   34,
       47,   11,   47,   11,   11,   11,   11,   11,   11,  269,
      264,  262,   34,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   50,   51,   54,   57,   67,   54,
       51,   82,   87,   67,   57,   50,  261,   50,   95,   99,
      100,   57,  100,  101,  260,  101,   95,   99,  101,  116,
      100,  259,  115,  116,  255,   87,  124,   82,  115,   95,
       99,  127,  124,  100,  139,  127,  140,  254,  154,  139,
      154,  140,  253,  154,  189,  246,  245,  242,  241,  240,
      239,  238,  237,  236,  235,  234,  189,  232,  231,  230,
      229,  228,  223,  189,  189,  221,  219,  218,  215,  214,
      189,  213,  212,  189,  189,  189,  189,  189,  189,  191,
      211,  210,  209,  208,  207,  206,  204,  203,  191,  202,

      200,  199,  198,  196,  193,  191,  191,  192,  190,  188,
      187,  186,  191,  185,  184,  191,  191,  191,  191,  191,
      191,  222,  183,  182,  181,  180,  179,  178,  177,  174,
      173,  171,  170,  222,  169,  168,  167,  166,  165,  163,
      222,  222,  161,  160,  159,  158,  157,  222,  156,  151,
      222,  222,  222,  222,  222,  222,  224,  149,  146,  145,
      143,  136,  135,  134,  133,  224,  132,  131,  130,  129,
      128,  126,  224,  224,  125,  122,  121,  120,  119,  224,
      118,  117,  224,  224,  224,  224,  224,  224,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  275,  275,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  276,  276,  114,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  277,  277,
      113,  277,  112,  277,  277,  277,  277,  277,  277,  277,
      278,  111,  110,  278,  278,  278,  279,  279,  109,  279,
      279,   88,  279,  279,  279,  279,  279,  279,  280,  280,
       85,  280,  280,  280,  280,  280,  280,  280,  280,  280,
      281,   84,   80,  281,  281,  281,  282,   73,  282,   71,

      282,  282,  282,  282,  282,  282,  282,  282,  283,  283,
       70,  283,  283,  283,  283,   62,  283,  283,  283,  283,
      284,  284,   60,   59,  284,  284,  284,  284,  284,  284,
      284,  284,  285,  285,   58,   56,   55,  285,   53,  285,
      285,  286,  286,   52,   42,   38,  286,   35,  286,  286,
      287,  287,   32,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  288,   28,   25,   24,  288,  289,   23,   21,
       17,  289,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,
      271
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#define INITIAL 0
/* declerations */
//#include "prog_tree.h"
#include "minic++.cpp.h" /* contains token definitions and definitions */
#include <list>
#include <string>
#include <iostream.h>
#include <malloc.h>
#include "errorReporting.h"
extern YYSTYPE yylval;

void addClassID(char*);
int isClassType(char*);
int includeFileProcess();
char* getVal();
void set_location();

using namespace std;
list<char*> class_id_list;
list<char*>::iterator itr	;
int line_num = 1;
int col_num=1;

#define MAX_INCLUDE_DEPTH 10
YY_BUFFER_STATE include_stack[MAX_INCLUDE_DEPTH];
int include_stack_ptr = 0;

char fileNameBuffer[YY_BUF_SIZE]={0};
int fileNameLeng=0;

extern int yyerror (char *s);
extern YYLTYPE yylloc;
/* integer_const [-+]?[0-9]+  (-+ cause a problem so we ommit it, else spaces between operands is required */
/* due to the longest match rule */
/*  for string and character definition */
#define COMMENT 1

#define CLASS_NAME 2

#define INCLUDE_STATE 3

#define INCL_S0 4

#define INCL_S00 5

#define INCL_S1 6

#define INCL_S11 7

/*	INCL_S0 incdicates that we saw <
	so we need to get a valid include file name definition before >and then swap the buffers
	
	INCL_S1 incdicates that we saw "
	so we need to get a valid include file name definition before the next " then swap the buffers
	
	so include can be defined only in these two ways:
	#include <filename>
	#include "filename"		
	
	if include file is not well formed it's line is ignored and parsing continues
	for example:	#include <dddd"
	error could be reported
*/
/* rules definition*/

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 272 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 573 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{BEGIN(INCLUDE_STATE); set_location(); }
	YY_BREAK
case 2:
YY_RULE_SETUP
{BEGIN(INCL_S0); set_location(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
{set_location(); }  
	YY_BREAK
case 4:
YY_RULE_SETUP
{++line_num;  set_location();col_num=1; yyerror("include decleration not well formed"); BEGIN(INITIAL); }
	YY_BREAK
case 5:
YY_RULE_SETUP
{set_location(); 
								strncpy(fileNameBuffer,yytext,yyleng);
								fileNameBuffer[yyleng]='\0';
								BEGIN(INCL_S00);	
							}
	YY_BREAK
case 6:
YY_RULE_SETUP
{set_location(); if(!includeFileProcess()){cout<<"include file doesn't exist\n";}BEGIN(INITIAL);}
	YY_BREAK
case 7:
YY_RULE_SETUP
{++line_num;	set_location();  col_num=1; BEGIN(INITIAL);
							/* after one line if we didn't got the include file
								name then we continue parsing, without the include statment*/
							yyerror("include file is not well declared, it's ignored\n");
						}
	YY_BREAK
case 8:
YY_RULE_SETUP
{set_location(); BEGIN(INCL_S1);}
	YY_BREAK
case 9:
YY_RULE_SETUP
{set_location(); 
								strncpy(fileNameBuffer,yytext,yyleng);
								fileNameBuffer[yyleng]='\0';
								BEGIN(INCL_S11);	
							}
	YY_BREAK
case 10:
YY_RULE_SETUP
{set_location(); if(!includeFileProcess()){cout<<"include file doesn't exist\n";}BEGIN(INITIAL);}
	YY_BREAK
case 11:
YY_RULE_SETUP
{++line_num;set_location();  col_num=1; BEGIN(INITIAL);
							/* after one line if we didn't got the include file
								name then we continue parsing, without the include statment*/
							yyerror("include file is not well declared, it's ignored\n");
						}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
case YY_STATE_EOF(CLASS_NAME):
case YY_STATE_EOF(INCLUDE_STATE):
case YY_STATE_EOF(INCL_S0):
case YY_STATE_EOF(INCL_S00):
case YY_STATE_EOF(INCL_S1):
case YY_STATE_EOF(INCL_S11):
{set_location(); 
        if ( --include_stack_ptr < 0 )
            {
            yyterminate();
            }

        else
            {
            yy_delete_buffer( YY_CURRENT_BUFFER );
            yy_switch_to_buffer(
                 include_stack[include_stack_ptr] );
            }
        }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ BEGIN(COMMENT); set_location(); }
	YY_BREAK
case 13:
YY_RULE_SETUP
{set_location();} 
	YY_BREAK
case 14:
YY_RULE_SETUP
{set_location();}
	YY_BREAK
case 15:
YY_RULE_SETUP
{++line_num;set_location(); col_num=1; }
	YY_BREAK
case 16:
YY_RULE_SETUP
{BEGIN(INITIAL);set_location(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
{set_location(); BEGIN(CLASS_NAME); return CLASS;}
	YY_BREAK
case 18:
YY_RULE_SETUP
{set_location(); BEGIN(INITIAL); addClassID(yytext); yylval.ids=getVal(); return CLASS_ID;}
	YY_BREAK
case 19:
YY_RULE_SETUP
{set_location();  return CIN;}
	YY_BREAK
case 20:
YY_RULE_SETUP
{set_location();  return COUT;}
	YY_BREAK
case 21:
YY_RULE_SETUP
{set_location();  return  BREAK;}
	YY_BREAK
case 22:
YY_RULE_SETUP
{set_location();  return  CHAR;}
	YY_BREAK
case 23:
YY_RULE_SETUP
{set_location();  return CONST;}
	YY_BREAK
case 24:
YY_RULE_SETUP
{set_location();  return DEFINE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
{set_location();  return DO;}
	YY_BREAK
case 26:
YY_RULE_SETUP
{set_location();  return DOUBLE;}
	YY_BREAK
case 27:
YY_RULE_SETUP
{set_location();  return ELSE;}
	YY_BREAK
case 28:
YY_RULE_SETUP
{set_location();  return EXTERN;}
	YY_BREAK
case 29:
YY_RULE_SETUP
{set_location();  return FOR;}
	YY_BREAK
case 30:
YY_RULE_SETUP
{set_location();  return IF;}
	YY_BREAK
case 31:
YY_RULE_SETUP
{set_location();  return INT;}
	YY_BREAK
case 32:
YY_RULE_SETUP
{set_location();  return RETURN;}
	YY_BREAK
case 33:
YY_RULE_SETUP
{set_location();  return CONTINUE;}
	YY_BREAK
case 34:
YY_RULE_SETUP
{set_location();  return STATIC;}
	YY_BREAK
case 35:
YY_RULE_SETUP
{set_location();  return TYPEDEF_ID;}
	YY_BREAK
case 36:
YY_RULE_SETUP
{set_location();  return UNDEF;}
	YY_BREAK
case 37:
YY_RULE_SETUP
{set_location();  return VOID;}
	YY_BREAK
case 38:
YY_RULE_SETUP
{set_location();  return WHILE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
{set_location(); return DELETE;}
	YY_BREAK
case 40:
YY_RULE_SETUP
{set_location(); return FRIEND;}
	YY_BREAK
case 41:
YY_RULE_SETUP
{set_location(); return INLINE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
{set_location(); return NEW;}
	YY_BREAK
case 43:
YY_RULE_SETUP
{set_location(); return OPERATOR;}
	YY_BREAK
case 44:
YY_RULE_SETUP
{set_location(); return PROTECTED;}
	YY_BREAK
case 45:
YY_RULE_SETUP
{set_location(); return PRIVATE;}
	YY_BREAK
case 46:
YY_RULE_SETUP
{set_location();  return PUBLIC;}
	YY_BREAK
case 47:
YY_RULE_SETUP
{set_location(); return THIS;}
	YY_BREAK
case 48:
YY_RULE_SETUP
{set_location(); return FALSE_CONST;}
	YY_BREAK
case 49:
YY_RULE_SETUP
{set_location(); return TRUE_CONST;}
	YY_BREAK
case 50:
YY_RULE_SETUP
{set_location(); return BOOL_TYPE;}
	YY_BREAK
case 51:
YY_RULE_SETUP
{set_location(); return NULL_TYPE;}
	YY_BREAK
case 52:
YY_RULE_SETUP
{set_location(); yylval.ids=getVal(); if(isClassType(yytext)) return CLASS_ID; else return ID_NAME;}
	YY_BREAK
case 53:
YY_RULE_SETUP
{set_location(); yylval.ids=getVal(); return INTEGER_CONST;}
	YY_BREAK
case 54:
YY_RULE_SETUP
{set_location(); yylval.ids=getVal(); return DOUBLE_CONST;}
	YY_BREAK
case 55:
YY_RULE_SETUP
{set_location(); yylval.ids=getVal(); return CHARACTER_CONST;}
	YY_BREAK
case 56:
YY_RULE_SETUP
{set_location(); yylval.ids=getVal(); return STRING_CONST;}
	YY_BREAK
case 57:
YY_RULE_SETUP
{set_location(); return '(';}
	YY_BREAK
case 58:
YY_RULE_SETUP
{set_location(); return ')';}
	YY_BREAK
case 59:
YY_RULE_SETUP
{set_location(); return ',';}
	YY_BREAK
case 60:
YY_RULE_SETUP
{set_location(); return '#' ;}
	YY_BREAK
case 61:
YY_RULE_SETUP
{set_location(); return '{';}
	YY_BREAK
case 62:
YY_RULE_SETUP
{set_location(); return '}';}
	YY_BREAK
case 63:
YY_RULE_SETUP
{set_location(); return '[';}
	YY_BREAK
case 64:
YY_RULE_SETUP
{set_location(); return ']';}
	YY_BREAK
case 65:
YY_RULE_SETUP
{set_location(); return '.';}
	YY_BREAK
case 66:
YY_RULE_SETUP
{set_location(); return '&';}
	YY_BREAK
case 67:
YY_RULE_SETUP
{set_location(); return '*';}
	YY_BREAK
case 68:
YY_RULE_SETUP
{set_location(); return '+';}
	YY_BREAK
case 69:
YY_RULE_SETUP
{set_location(); return '-';}
	YY_BREAK
case 70:
YY_RULE_SETUP
{set_location(); return '~';}
	YY_BREAK
case 71:
YY_RULE_SETUP
{set_location(); return '!';}
	YY_BREAK
case 72:
YY_RULE_SETUP
{set_location(); return '/';}
	YY_BREAK
case 73:
YY_RULE_SETUP
{set_location(); return '<';}
	YY_BREAK
case 74:
YY_RULE_SETUP
{set_location(); return '>';}
	YY_BREAK
case 75:
YY_RULE_SETUP
{set_location(); return '^' ;}
	YY_BREAK
case 76:
YY_RULE_SETUP
{set_location(); return '|';}
	YY_BREAK
case 77:
YY_RULE_SETUP
{set_location(); return '?';}
	YY_BREAK
case 78:
YY_RULE_SETUP
{set_location(); return ':';}
	YY_BREAK
case 79:
YY_RULE_SETUP
{set_location(); return ';';}
	YY_BREAK
case 80:
YY_RULE_SETUP
{set_location(); return '=';}
	YY_BREAK
case 81:
YY_RULE_SETUP
{set_location(); return SCOPE_DOTS;}
	YY_BREAK
case 82:
YY_RULE_SETUP
{set_location(); return ARROW;}
	YY_BREAK
case 83:
YY_RULE_SETUP
{set_location(); return ICR;}
	YY_BREAK
case 84:
YY_RULE_SETUP
{set_location(); return DECR;}
	YY_BREAK
case 85:
YY_RULE_SETUP
{set_location(); return LE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
{set_location(); return GE;}
	YY_BREAK
case 87:
YY_RULE_SETUP
{set_location(); return EQ;}
	YY_BREAK
case 88:
YY_RULE_SETUP
{set_location(); return NE;}
	YY_BREAK
case 89:
YY_RULE_SETUP
{set_location(); return PLUS_EQ;}
	YY_BREAK
case 90:
YY_RULE_SETUP
{set_location(); return MINUS_EQ;}				
	YY_BREAK
case 91:
YY_RULE_SETUP
{set_location(); return MULT_EQ;}
	YY_BREAK
case 92:
YY_RULE_SETUP
{set_location(); return DIV_EQ;}
	YY_BREAK
case 93:
YY_RULE_SETUP
{set_location(); return ANDAND;}
	YY_BREAK
case 94:
YY_RULE_SETUP
{set_location(); return OROR;}
	YY_BREAK
case 95:
YY_RULE_SETUP
{set_location(); return OUTPUT_VAR_SYM;}
	YY_BREAK
case 96:
YY_RULE_SETUP
{set_location(); return INPUT_VAR_SYM;}
	YY_BREAK
case 97:
YY_RULE_SETUP
/* ignore single line comment */
	YY_BREAK
case 98:
YY_RULE_SETUP
{set_location(); }
	YY_BREAK
case 99:
YY_RULE_SETUP
{++line_num; set_location(); col_num=1;}
	YY_BREAK
case 100:
YY_RULE_SETUP
{ErrorReport::printError(line_num,col_num,"unrecogonzied character"); set_location();}
	YY_BREAK
case 101:
YY_RULE_SETUP
ECHO;
	YY_BREAK

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 272 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 272 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 271);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif

int yywrap(){
	return 1;

}
int isClassType(char* id){
		for(itr=class_id_list.begin(); itr!=class_id_list.end();itr++){
			if(strncmp(*itr,id,yyleng)==0)
				return 1;
		}	
	return 0;
}

void addClassID(char* id){
	class_id_list.push_front(id);
	
}	

int includeFileProcess(){ 
	FILE* incFile=fopen( fileNameBuffer, "r" );

        if ( ! incFile ){
            cout<<"**********couldn't open include file\n*********";
            return 0;
            
        }
        else{
        		 /* got the include file name */
			if ( include_stack_ptr >= MAX_INCLUDE_DEPTH ){
				fprintf( stderr, "Includes nested too deeply\n" );
				exit( 1 );
			}
			yyin=incFile;	
			include_stack[include_stack_ptr++] =YY_CURRENT_BUFFER;
			yy_switch_to_buffer(yy_new_buffer( yyin, YY_BUF_SIZE ) );
		}
        return 1;
}


char* getVal(){
	char* val=(char*)malloc(strlen(yytext)+1);
	strncpy(val,yytext,yyleng);
	val[yyleng]='\0';
	return val;
}


void set_location(){
	yylloc.first_line=line_num;
	yylloc.first_column=col_num;
	
	yylloc.last_line=line_num;
	col_num+=yyleng; //update column
	yylloc.last_column=col_num;
}