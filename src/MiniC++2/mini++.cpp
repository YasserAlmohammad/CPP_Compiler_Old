
/*  A Bison parser, made from minic++.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define YYLSP_NEEDED

#define	EXTERN	258
#define	CIN	259
#define	DEFINE	260
#define	BREAK	261
#define	COUT	262
#define	UNDEF	263
#define	FOR	264
#define	TYPEDEF_ID	265
#define	DOUBLE	266
#define	INCLUDE	267
#define	RETURN	268
#define	DO	269
#define	WHILE	270
#define	CONTINUE	271
#define	ID_NAME	272
#define	CLASS_ID	273
#define	INT	274
#define	BOOL_TYPE	275
#define	CHAR	276
#define	STATIC	277
#define	CONST	278
#define	INTEGER_CONST	279
#define	DOUBLE_CONST	280
#define	STRING_CONST	281
#define	CHARACTER_CONST	282
#define	FALSE_CONST	283
#define	TRUE_CONST	284
#define	VOID	285
#define	PUBLIC	286
#define	PROTECTED	287
#define	PRIVATE	288
#define	FRIEND	289
#define	NEW	290
#define	DELETE	291
#define	THIS	292
#define	OPERATOR	293
#define	CLASS	294
#define	INLINE	295
#define	VIRTUAL	296
#define	INPUT_VAR_SYM	297
#define	OUTPUT_VAR_SYM	298
#define	PLUS_EQ	299
#define	MULT_EQ	300
#define	MINUS_EQ	301
#define	DIV_EQ	302
#define	LE	303
#define	GE	304
#define	EQ	305
#define	NE	306
#define	OROR	307
#define	ANDAND	308
#define	POS_NEG	309
#define	ICR	310
#define	DECR	311
#define	LAST_PREC	312
#define	ARROW	313
#define	SCOPE_DOTS	314
#define	IF	315
#define	ELSE	316

#line 1 "minic++.y"

#include <stdio.h>
#include <iostream.h>
#include <string.h>
#include "malloc.h"
//#include "symbol_table.h"
#include "prog_tree.h"

#line 13 "minic++.y"
typedef union{
	TreeRecord* node;
	char*	ids;
} YYSTYPE;
#line 18 "minic++.y"

/*************** Includes and Defines *****************************/
#define YYDEBUG 1        /* get the pretty debugging code to compile*/
//#define YYSTYPE  char*  /* interface with flex: should be in header file */
extern FILE* yyin;
extern int yylex();
extern int yyparse();
extern int yyerror(char*);
extern SymbolTable symtab;
//extern Record* cur_par; //initially this record contains the file scope record
//depth value used with name of id to make a unique id in a scope
//current parent
extern ProgTree progTree;
//Record* tempPar=NULL;

//Record* add2symtab(char* name);
//void restorePar();
YYSTYPE yylval;

char name_buffer[100]={0};

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		411
#define	YYFLAG		-32768
#define	YYNTBASE	82

#define YYTRANSLATE(x) ((unsigned)(x) <= 316 ? yytranslate[x] : 162)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    62,     2,     2,     2,     2,    61,     2,    63,
    64,    59,    55,    75,    56,    81,    60,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    74,    73,    53,
    52,    54,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    79,     2,    80,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    76,     2,    77,    78,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    57,    58,    65,    66,
    67,    68,    69,    70,    71,    72
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     9,    12,    14,    16,    18,    20,
    22,    25,    27,    29,    32,    38,    41,    43,    45,    47,
    49,    51,    55,    59,    63,    68,    70,    73,    76,    78,
    80,    83,    85,    87,    90,    93,    99,   108,   109,   112,
   117,   124,   130,   133,   141,   148,   157,   165,   167,   169,
   171,   174,   177,   178,   180,   182,   186,   188,   191,   196,
   198,   200,   204,   207,   210,   212,   219,   227,   229,   231,
   235,   238,   241,   243,   252,   254,   257,   260,   262,   265,
   268,   270,   272,   274,   276,   278,   280,   282,   286,   289,
   291,   294,   298,   303,   305,   309,   314,   316,   319,   322,
   326,   330,   334,   336,   340,   342,   346,   353,   361,   365,
   369,   373,   377,   381,   386,   393,   400,   407,   414,   415,
   417,   419,   423,   425,   428,   430,   432,   435,   437,   440,
   443,   446,   448,   451,   454,   456,   458,   460,   462,   465,
   469,   475,   483,   493,   495,   499,   501,   503,   509,   511,
   513,   515,   517,   519,   521,   523,   525,   527,   529,   532,
   535,   537,   539,   541,   543,   545,   547,   549,   553,   555,
   557,   559,   561,   563,   565,   567,   571,   575,   577,   579,
   581,   585,   589,   593,   597,   600,   604,   609,   612,   615,
   618,   621,   624,   627,   630,   633,   636,   638,   640,   644,
   648,   652,   656,   660,   664,   668,   672,   676,   680,   684,
   688,   690,   696,   702,   705,   710,   715
};

static const short yyrhs[] = {    83,
     0,     0,    83,    84,     0,    83,     1,     0,   114,    73,
     0,    98,     0,   103,     0,    97,     0,   107,     0,    85,
     0,   122,    73,     0,   123,     0,    93,     0,    86,    89,
     0,    86,    74,    87,    88,    89,     0,    39,   161,     0,
    31,     0,    32,     0,    33,     0,    34,     0,   161,     0,
    88,    75,   161,     0,    88,    75,     1,     0,    76,    77,
    73,     0,    76,    90,    77,    73,     0,    91,     0,    90,
    91,     0,    87,    74,     0,    98,     0,   103,     0,   114,
    73,     0,    92,     0,    96,     0,     1,    73,     0,     1,
    77,     0,   161,    63,   100,    64,    73,     0,   161,    70,
   161,    63,   100,    64,    94,   136,     0,     0,    74,    95,
     0,    17,    63,   147,    64,     0,    95,    75,    17,    63,
   147,    64,     0,    78,   161,    63,    64,    73,     0,    86,
    73,     0,    99,   142,    17,    63,   100,    64,    73,     0,
   142,    17,    63,   100,    64,    73,     0,    99,   142,    17,
    63,   100,    64,    23,    73,     0,   142,    17,    63,   100,
    64,    23,    73,     0,    22,     0,    23,     0,     3,     0,
    22,    23,     0,    23,    22,     0,     0,   101,     0,   102,
     0,   101,    75,   102,     0,   142,     0,   142,    17,     0,
   142,    17,    52,   148,     0,   104,     0,   105,     0,    99,
    40,   106,     0,    40,   106,     0,    99,   106,     0,   106,
     0,   142,    17,    63,   100,    64,   136,     0,   142,    17,
    63,   100,    64,    23,   136,     0,   108,     0,   109,     0,
    99,    40,   110,     0,    40,   110,     0,    99,   110,     0,
   110,     0,   142,   161,    70,    17,    63,   100,    64,   136,
     0,   112,     0,   111,   112,     0,   113,    73,     0,   135,
     0,     1,    73,     0,     1,    77,     0,   114,     0,   124,
     0,   147,     0,   128,     0,   129,     0,   132,     0,   159,
     0,    99,   142,   116,     0,   142,   116,     0,    17,     0,
    17,   117,     0,    17,    52,   147,     0,    17,   117,    52,
   119,     0,   115,     0,   116,    75,   115,     0,    17,    63,
   127,    64,     0,   118,     0,   117,   118,     0,    79,    80,
     0,    79,    24,    80,     0,    76,   120,    77,     0,    76,
   121,    77,     0,   147,     0,   120,    75,   147,     0,   119,
     0,   121,    75,   119,     0,   142,   161,    70,    17,    52,
   147,     0,   161,    70,    78,   161,    63,    64,   136,     0,
   149,    52,   147,     0,   149,    44,   147,     0,   149,    46,
   147,     0,   149,    47,   147,     0,   149,    45,   147,     0,
    17,    63,   126,    64,     0,    17,    81,    17,    63,   126,
    64,     0,    37,    69,    17,    63,   126,    64,     0,   161,
    70,    17,    63,   126,    64,     0,    17,    69,    17,    63,
   126,    64,     0,     0,   127,     0,   147,     0,   127,    75,
   147,     0,     6,     0,    13,   147,     0,    16,     0,    13,
     0,     4,   130,     0,   131,     0,   130,   131,     0,    42,
   149,     0,     7,   133,     0,   134,     0,   133,   134,     0,
    43,   147,     0,   137,     0,   138,     0,   141,     0,   136,
     0,    76,    77,     0,    76,   111,    77,     0,    71,    63,
   147,    64,   112,     0,    71,    63,   147,    64,   112,    72,
   112,     0,     9,    63,   114,    73,   147,    73,   139,    64,
   136,     0,   140,     0,   139,    75,   140,     0,   147,     0,
   124,     0,    15,    63,   147,    64,   112,     0,   143,     0,
   144,     0,    19,     0,    11,     0,    20,     0,    21,     0,
    30,     0,   145,     0,   146,     0,   161,     0,   142,    59,
     0,   142,    61,     0,   148,     0,   149,     0,   153,     0,
   154,     0,   157,     0,   125,     0,   160,     0,    63,   147,
    64,     0,    24,     0,    25,     0,    27,     0,    26,     0,
    28,     0,    29,     0,   150,     0,   150,    81,   149,     0,
   150,    69,   149,     0,   152,     0,    17,     0,    37,     0,
    17,    81,   149,     0,   161,    70,    17,     0,    17,    69,
   149,     0,    37,    69,   149,     0,    17,   151,     0,    79,
   147,    80,     0,   151,    79,   147,    80,     0,    59,   149,
     0,    62,   147,     0,    56,   147,     0,    66,   147,     0,
   147,    66,     0,    67,   147,     0,   147,    67,     0,    61,
   149,     0,    55,   147,     0,   155,     0,   156,     0,   147,
    55,   147,     0,   147,    56,   147,     0,   147,    60,   147,
     0,   147,    59,   147,     0,   147,    53,   147,     0,   147,
    54,   147,     0,   147,    48,   147,     0,   147,    49,   147,
     0,   147,    50,   147,     0,   147,    51,   147,     0,   147,
    57,   147,     0,   147,    58,   147,     0,   158,     0,    35,
   142,    79,   147,    80,     0,    35,   142,    63,   126,    64,
     0,    36,   149,     0,    36,    79,    80,   149,     0,    63,
   142,    64,   147,     0,    18,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   106,   110,   112,   113,   116,   119,   120,   121,   122,   123,
   124,   125,   126,   140,   142,   145,   149,   151,   152,   153,
   156,   158,   159,   162,   164,   167,   169,   172,   174,   175,
   176,   177,   178,   179,   180,   186,   191,   196,   197,   200,
   202,   206,   210,   213,   216,   218,   220,   225,   227,   228,
   229,   231,   235,   236,   248,   250,   253,   255,   256,   273,
   275,   277,   279,   282,   284,   287,   290,   303,   305,   308,
   310,   313,   315,   318,   325,   327,   332,   334,   335,   336,
   343,   345,   346,   347,   348,   349,   350,   353,   355,   358,
   361,   363,   365,   380,   382,   383,   395,   397,   400,   402,
   406,   408,   411,   413,   416,   418,   427,   438,   442,   444,
   445,   446,   447,   452,   455,   457,   459,   461,   467,   468,
   470,   472,   476,   478,   479,   480,   483,   487,   489,   491,
   495,   500,   502,   504,   509,   511,   512,   513,   517,   519,
   523,   525,   531,   538,   540,   543,   545,   549,   554,   556,
   559,   561,   562,   563,   564,   568,   570,   571,   580,   583,
   587,   589,   590,   591,   592,   593,   594,   595,   604,   606,
   607,   608,   609,   610,   614,   616,   617,   618,   619,   620,
   621,   622,   624,   626,   634,   637,   639,   642,   647,   649,
   650,   651,   652,   653,   654,   655,   659,   661,   664,   666,
   667,   668,   671,   673,   674,   675,   676,   677,   678,   679,
   682,   686,   688,   698,   700,   702,   752
};

static const char * const yytname[] = {   "$","error","$undefined.","EXTERN",
"CIN","DEFINE","BREAK","COUT","UNDEF","FOR","TYPEDEF_ID","DOUBLE","INCLUDE",
"RETURN","DO","WHILE","CONTINUE","ID_NAME","CLASS_ID","INT","BOOL_TYPE","CHAR",
"STATIC","CONST","INTEGER_CONST","DOUBLE_CONST","STRING_CONST","CHARACTER_CONST",
"FALSE_CONST","TRUE_CONST","VOID","PUBLIC","PROTECTED","PRIVATE","FRIEND","NEW",
"DELETE","THIS","OPERATOR","CLASS","INLINE","VIRTUAL","INPUT_VAR_SYM","OUTPUT_VAR_SYM",
"PLUS_EQ","MULT_EQ","MINUS_EQ","DIV_EQ","LE","GE","EQ","NE","'='","'<'","'>'",
"'+'","'-'","OROR","ANDAND","'*'","'/'","'&'","'!'","'('","')'","POS_NEG","ICR",
"DECR","LAST_PREC","ARROW","SCOPE_DOTS","IF","ELSE","';'","':'","','","'{'",
"'}'","'~'","'['","']'","'.'","program","prog_decls","declaration","class_def",
"class_head","access_spec","class_base_list","class_body","class_body_stmts",
"class_body_stmt","class_constructor_decl","class_constructor","class_constructor_init_list",
"c_c_init_list","class_destructor_decl","class_decl","func_decl","storage_spec",
"func_decl_args","func_decl_arg_list","func_decl_arg_elem","func_def","func_def_inline",
"func_def_normal","func_def_common","class_func_def","class_func_def_inline",
"class_func_def_normal","class_func_def_common","stmts","stmt","simple_stmt",
"var_decl","var_list_elem","var_list","array_dims","array_dim","array_init_list",
"array_init_list_consts","array_init_list_lists","class_static_init_var","class_destructor",
"assignment","proc_call","proc_expr_list","proc_expr_list_not_empty","jump_stmt",
"cin_stmt","cin_stmt_input_list","input_elem","cout_stmt","cout_stmt_output_list",
"output_elem","compound_stmt","block_stmt","if_stmt","for_stmt","for_itr","for_itr_elem",
"while_stmt","type","simple_type","complex_type","pointer_type","reference_type",
"expr","const_expr","var_expr","array_expr","array_expr_dims","pointer_val_expr",
"unary_expr","binary_expr","math_operation_expr","logical_operation_expr","allocate_expr",
"new_expr","delete_stmt","cast_expr","class_type",""
};
#endif

static const short yyr1[] = {     0,
    82,    83,    83,    83,    84,    84,    84,    84,    84,    84,
    84,    84,    84,    85,    85,    86,    87,    87,    87,    87,
    88,    88,    88,    89,    89,    90,    90,    91,    91,    91,
    91,    91,    91,    91,    91,    92,    93,    94,    94,    95,
    95,    96,    97,    98,    98,    98,    98,    99,    99,    99,
    99,    99,   100,   100,   101,   101,   102,   102,   102,   103,
   103,   104,   104,   105,   105,   106,   106,   107,   107,   108,
   108,   109,   109,   110,   111,   111,   112,   112,   112,   112,
   113,   113,   113,   113,   113,   113,   113,   114,   114,   115,
   115,   115,   115,   116,   116,   116,   117,   117,   118,   118,
   119,   119,   120,   120,   121,   121,   122,   123,   124,   124,
   124,   124,   124,   125,   125,   125,   125,   125,   126,   126,
   127,   127,   128,   128,   128,   128,   129,   130,   130,   131,
   132,   133,   133,   134,   135,   135,   135,   135,   136,   136,
   137,   137,   138,   139,   139,   140,   140,   141,   142,   142,
   143,   143,   143,   143,   143,   144,   144,   144,   145,   146,
   147,   147,   147,   147,   147,   147,   147,   147,   148,   148,
   148,   148,   148,   148,   149,   149,   149,   149,   149,   149,
   149,   149,   149,   149,   150,   151,   151,   152,   153,   153,
   153,   153,   153,   153,   153,   153,   154,   154,   155,   155,
   155,   155,   156,   156,   156,   156,   156,   156,   156,   156,
   157,   158,   158,   159,   159,   160,   161
};

static const short yyr2[] = {     0,
     1,     0,     2,     2,     2,     1,     1,     1,     1,     1,
     2,     1,     1,     2,     5,     2,     1,     1,     1,     1,
     1,     3,     3,     3,     4,     1,     2,     2,     1,     1,
     2,     1,     1,     2,     2,     5,     8,     0,     2,     4,
     6,     5,     2,     7,     6,     8,     7,     1,     1,     1,
     2,     2,     0,     1,     1,     3,     1,     2,     4,     1,
     1,     3,     2,     2,     1,     6,     7,     1,     1,     3,
     2,     2,     1,     8,     1,     2,     2,     1,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     3,     2,     1,
     2,     3,     4,     1,     3,     4,     1,     2,     2,     3,
     3,     3,     1,     3,     1,     3,     6,     7,     3,     3,
     3,     3,     3,     4,     6,     6,     6,     6,     0,     1,
     1,     3,     1,     2,     1,     1,     2,     1,     2,     2,
     2,     1,     2,     2,     1,     1,     1,     1,     2,     3,
     5,     7,     9,     1,     3,     1,     1,     5,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     2,     2,
     1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     3,     3,     1,     1,     1,
     3,     3,     3,     3,     2,     3,     4,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     1,     1,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     1,     5,     5,     2,     4,     4,     1
};

static const short yydefact[] = {     2,
     0,     4,    50,   152,   217,   151,   153,   154,    48,    49,
   155,     0,     0,     3,    10,     0,    13,     8,     6,     0,
     7,    60,    61,    65,     9,    68,    69,    73,     0,     0,
    12,     0,   149,   150,   156,   157,   158,    51,    52,    16,
    63,    71,     0,   158,    43,     0,     0,    14,     0,    64,
    72,     0,     5,    11,    90,   159,   160,    94,    89,     0,
     0,     0,     0,    17,    18,    19,    20,     0,     0,     0,
     0,     0,     0,     0,    26,    32,    33,    29,     0,    30,
     0,     0,   158,    62,    70,    90,    88,     0,    53,     0,
    91,    97,     0,     0,     0,     0,    53,     0,     0,    21,
    34,    35,     0,    24,     0,    28,     0,    27,     0,     0,
    31,    53,    53,   179,   169,   170,   172,   171,   173,   174,
     0,   180,     0,     0,     0,     0,     0,     0,     0,     0,
   166,    92,   161,   162,   175,   178,   163,   164,   197,   198,
   165,   211,   167,     0,     0,    54,    55,     0,    57,   121,
   158,     0,    99,     0,    98,    90,    95,     0,     0,    53,
     0,     0,     0,    15,     0,    25,     0,     0,   119,     0,
     0,     0,   185,     0,     0,   196,   190,   179,   180,   188,
     0,   195,   189,     0,     0,   191,   193,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   192,
   194,     0,     0,     0,     0,     0,    96,     0,    58,   100,
     0,    93,     0,    53,     0,     0,     0,    23,    22,     0,
     0,     0,     0,   120,   179,   183,     0,   179,   181,     0,
   119,     0,   179,   184,     0,     0,     0,     0,     0,   168,
   205,   206,   207,   208,   203,   204,   199,   200,   209,   210,
   202,   201,   177,   176,   182,     0,    45,     0,    66,    56,
   122,     0,   105,     0,     0,   103,   107,     0,     0,    38,
     0,    42,    36,     0,    44,   114,   119,   186,   119,     0,
     0,     0,   119,   182,   216,   119,    47,    67,     0,     0,
   123,     0,     0,   126,     0,   125,     0,     0,   139,     0,
     0,    75,     0,    81,    82,    84,    85,    86,    78,   138,
   135,   136,   137,     0,    83,   162,    87,    59,     0,   101,
     0,   102,     0,   108,     0,     0,    46,     0,     0,   187,
   213,   212,     0,     0,    79,    80,     0,   127,   128,     0,
   131,   132,     0,   124,     0,     0,   214,     0,     0,   140,
    76,    77,    90,     0,     0,     0,     0,     0,   104,   106,
    74,     0,    39,    37,   118,   115,   116,   117,   130,   129,
   134,   133,     0,     0,     0,     0,     0,   110,   113,   111,
   112,   109,     0,     0,     0,     0,   215,     0,     0,     0,
     0,   148,   141,    40,     0,     0,     0,     0,   147,     0,
   144,   146,   142,    41,     0,     0,   143,   145,     0,     0,
     0
};

static const short yydefgoto[] = {   409,
     1,    14,    15,    16,    73,    99,    48,    74,    75,    76,
    17,   326,   363,    77,    18,    78,   300,   145,   146,   147,
    80,    22,    23,    24,    25,    26,    27,    28,   301,   302,
   303,   304,    58,    59,    91,    92,   212,   264,   265,    30,
    31,   305,   131,   223,   224,   306,   307,   338,   339,   308,
   341,   342,   309,   310,   311,   312,   400,   401,   313,   149,
    33,    34,    35,    36,   150,   133,   134,   135,   173,   136,
   137,   138,   139,   140,   141,   142,   317,   143,   144
};

static const short yypact[] = {-32768,
   230,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    18,    28,
-32768,    38,   392,-32768,-32768,   166,-32768,-32768,-32768,   226,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    24,    31,
-32768,    46,-32768,-32768,-32768,-32768,    -5,-32768,-32768,-32768,
-32768,-32768,    92,-32768,-32768,   373,   398,-32768,   392,-32768,
-32768,    99,-32768,-32768,   -39,-32768,-32768,-32768,    48,     2,
    -8,    77,    98,-32768,-32768,-32768,-32768,    38,   127,   392,
    88,    38,   108,   467,-32768,-32768,-32768,-32768,   346,-32768,
   148,    70,   125,-32768,-32768,   -24,    48,   746,   732,   -22,
    -3,-32768,   186,   205,    38,   175,   392,   248,   132,-32768,
-32768,-32768,   104,-32768,   180,-32768,   200,-32768,   392,   105,
-32768,   392,   732,   195,-32768,-32768,-32768,-32768,-32768,-32768,
   392,   203,   746,   746,   130,   130,   746,   732,   746,   746,
-32768,   922,-32768,-32768,    76,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   207,   215,   206,-32768,   -43,   119,   922,
   207,   202,-32768,   222,-32768,    63,-32768,    80,   220,   392,
   238,   240,    26,-32768,   244,-32768,   246,   252,   746,   138,
   746,   155,   250,    91,   169,-32768,-32768,   112,   256,-32768,
   257,-32768,-32768,   135,   822,-32768,-32768,   746,   746,   746,
   746,   746,   746,   746,   746,   746,   746,   746,   746,-32768,
-32768,   130,   130,   315,    22,   392,-32768,   746,   281,-32768,
   679,-32768,   746,   392,   273,   274,   -15,-32768,-32768,   266,
   268,    30,   283,   278,   199,-32768,   264,   271,-32768,   746,
   746,   746,   282,-32768,   130,   130,   130,   329,   746,-32768,
   406,   406,   406,   406,   406,   406,   367,   367,   367,   367,
   188,   188,-32768,-32768,   292,   122,-32768,   502,-32768,-32768,
   922,   522,-32768,   152,   184,   922,   922,   294,   280,   285,
   280,-32768,-32768,   142,-32768,-32768,   746,-32768,   746,   766,
   304,   794,   746,-32768,-32768,   746,-32768,-32768,   139,   327,
-32768,   330,   309,   746,   312,-32768,    -2,   314,-32768,   392,
   579,-32768,   305,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   124,   922,   337,-32768,-32768,   746,-32768,
   222,-32768,   280,-32768,   362,   280,-32768,   324,   328,-32768,
-32768,-32768,   331,   334,-32768,-32768,   130,   327,-32768,   746,
   330,-32768,   437,   922,   746,   320,-32768,   746,   124,-32768,
-32768,-32768,    39,   746,   746,   746,   746,   746,   922,-32768,
-32768,   345,   319,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   922,-32768,   341,   842,   130,   862,   746,   922,   922,   922,
   922,   922,   746,   407,   746,   656,-32768,   656,   882,   360,
   570,-32768,   353,-32768,   746,   746,   656,   902,-32768,   115,
-32768,   922,-32768,-32768,   280,   746,-32768,-32768,   435,   439,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,   391,-32768,   343,-32768,   369,-32768,
-32768,-32768,-32768,-32768,-32768,   444,    19,   -75,-32768,   241,
   445,-32768,-32768,    10,-32768,-32768,-32768,    -6,-32768,  -296,
-32768,     0,   356,   -48,-32768,   378,  -208,-32768,-32768,-32768,
-32768,  -370,-32768,  -149,   -80,-32768,-32768,-32768,   133,-32768,
-32768,   136,-32768,  -188,-32768,-32768,-32768,    68,-32768,     5,
-32768,-32768,-32768,-32768,    96,   218,   -26,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    -1
};


#define	YYLAST		989


static const short yytable[] = {    37,
    29,   152,   263,    87,   351,    32,    42,   271,   148,     5,
    40,    44,    88,    51,   178,     5,   259,    43,    44,    20,
   207,   161,    41,    89,    52,   399,   218,    88,   259,    50,
    60,   208,   148,   259,   179,   399,   167,   168,   113,    90,
    38,    63,    85,     5,   256,    83,    81,    44,   154,    39,
    63,    82,   274,    43,    90,     5,   125,   153,    84,    96,
   258,    87,    55,     5,    61,    79,   100,   288,    44,    95,
   105,    94,    83,    81,   103,    90,   346,    44,    82,    41,
   324,   281,   288,   110,   216,   288,    55,   151,    50,   392,
    88,   393,    79,   159,   257,    44,    53,   258,   180,   182,
   403,   377,   275,    54,    56,   258,    57,    44,    62,     5,
    44,   151,   360,   103,    88,    86,     5,    90,    84,    44,
    62,    86,    93,   181,   181,   174,   151,   328,    56,   329,
    57,   213,   184,   333,   361,   209,   334,   364,   268,    97,
   353,    90,   214,   226,   202,   229,   178,     5,   234,    56,
    56,    57,    57,   231,   225,     5,   203,    56,    44,    57,
   104,   219,    56,    56,    57,    57,   179,    98,   181,   232,
   181,   228,     5,   181,   179,   253,   254,    56,   405,    57,
   235,   106,    56,   132,    57,   233,     5,   112,   125,   406,
   171,   179,   236,    56,   287,    57,   125,   258,   239,   101,
   181,   181,   156,   102,    44,   179,   163,    47,   226,   229,
   234,   335,    44,   125,   327,   336,   407,   258,   176,   177,
   111,   158,   183,   185,   186,   187,   319,   125,   320,    -1,
     2,   316,     3,   181,   181,   181,     4,   160,    45,    46,
     4,    47,   165,     5,     6,     7,     8,     5,     6,     7,
     8,     9,    10,   200,   201,    11,   151,   169,   321,    11,
   322,   277,   314,   170,   162,    49,   227,   235,    12,    13,
   347,   175,   166,   171,   316,   172,   204,   171,   205,   236,
   206,   210,   215,   241,   242,   243,   244,   245,   246,   247,
   248,   249,   250,   251,   252,   181,   148,   211,    44,   151,
    87,   217,   214,   261,   349,   314,   266,   220,   267,   221,
   369,   188,   189,   190,   191,   222,   192,   193,   194,   195,
   196,   197,   198,   199,   237,   280,   238,   282,   230,   200,
   201,   255,   262,   279,   285,   181,   269,   270,   272,   235,
   273,    44,   373,   278,   283,   284,   276,   314,   387,   171,
   235,   236,   208,   315,   286,   258,     4,   323,   325,   316,
   171,   316,   236,     5,     6,     7,     8,   331,   337,   316,
   316,   343,   340,   181,   345,    11,   348,   352,   362,   316,
   354,   355,   356,   357,   151,   109,   151,   365,   358,   344,
   314,   366,   314,   384,   367,   151,   315,   368,    69,   375,
     3,   314,     4,    64,    65,    66,    67,   383,     4,     5,
     6,     7,     8,   385,   359,     5,     6,     7,     8,     9,
    10,    11,   395,   390,   397,   198,   199,    11,    64,    65,
    66,    67,   200,   201,   410,   371,    68,    70,   411,     3,
   374,   164,   108,   376,    19,    21,   260,     4,   157,   378,
   379,   380,   381,   382,     5,     6,     7,     8,     9,    10,
   194,   195,   196,   197,   198,   199,    11,    69,   155,     3,
   370,   200,   201,   408,    71,    72,   372,     4,   389,   318,
   391,   315,     0,   315,     5,     6,     7,     8,     9,    10,
   398,   402,   315,     0,     0,     0,    11,    64,    65,    66,
    67,   402,   289,     0,     3,   290,    70,   291,   292,     0,
   293,     0,     4,     0,   294,     0,   295,   296,   114,     5,
     6,     7,     8,     9,    10,   115,   116,   117,   118,   119,
   120,    11,     0,     0,     0,     0,   121,   297,   122,     0,
     0,     0,     0,   107,    72,   115,   116,   117,   118,   119,
   120,     0,     0,     0,     0,     0,   123,   124,     0,     0,
   125,     0,   126,   127,   128,     0,     0,   129,   130,     0,
     0,     0,   298,     0,     0,     0,     0,   258,   299,   289,
     0,     3,   290,     0,   291,   292,     0,   293,     0,     4,
     0,   294,     0,   295,   296,   114,     5,     6,     7,     8,
     9,    10,   115,   116,   117,   118,   119,   120,    11,     0,
     0,     0,     0,   121,   297,   122,     0,   188,   189,   190,
   191,     0,   192,   193,   194,   195,   196,   197,   198,   199,
     0,     0,     0,   123,   124,   200,   201,   125,     0,   126,
   127,   128,   396,     0,   129,   130,     0,     0,     0,   298,
     0,     0,     0,     0,   258,   350,   289,     0,     3,   290,
     0,   291,   292,     0,   293,     0,     4,     0,   294,     0,
   295,   296,   114,     5,     6,     7,     8,     9,    10,   115,
   116,   117,   118,   119,   120,    11,     0,     0,     0,     0,
   121,   297,   122,     0,     0,   114,     5,     0,     0,     0,
     0,     0,   115,   116,   117,   118,   119,   120,     0,     0,
   123,   124,     0,   121,   125,   122,   126,   127,   128,     0,
     0,   129,   130,     0,     0,     0,   298,     0,     0,     0,
     0,   258,     0,   123,   124,     0,     0,   125,     0,   126,
   127,   128,     4,     0,   129,   130,     0,     0,   114,     5,
     6,     7,     8,     0,   211,   115,   116,   117,   118,   119,
   120,    11,   114,     5,     0,     0,   121,     0,   122,   115,
   116,   117,   118,   119,   120,     0,     0,     0,     0,     0,
   121,     0,   122,     0,     0,     0,   123,   124,     0,     0,
   125,     0,   126,   127,   128,     0,     0,   129,   130,     0,
   123,   124,     0,     0,   125,     0,   126,   127,   128,     0,
     0,   129,   130,   188,   189,   190,   191,     0,   192,   193,
   194,   195,   196,   197,   198,   199,     0,     0,     0,     0,
     0,   200,   201,     0,     0,     0,     0,     0,     0,     0,
     0,   188,   189,   190,   191,   330,   192,   193,   194,   195,
   196,   197,   198,   199,     0,     0,     0,     0,     0,   200,
   201,     0,     0,     0,     0,     0,     0,     0,     0,   188,
   189,   190,   191,   332,   192,   193,   194,   195,   196,   197,
   198,   199,     0,     0,     0,   240,     0,   200,   201,   188,
   189,   190,   191,     0,   192,   193,   194,   195,   196,   197,
   198,   199,     0,     0,     0,   386,     0,   200,   201,   188,
   189,   190,   191,     0,   192,   193,   194,   195,   196,   197,
   198,   199,     0,     0,     0,   388,     0,   200,   201,   188,
   189,   190,   191,     0,   192,   193,   194,   195,   196,   197,
   198,   199,     0,     0,     0,   394,     0,   200,   201,   188,
   189,   190,   191,     0,   192,   193,   194,   195,   196,   197,
   198,   199,     0,     0,     0,   404,     0,   200,   201,   188,
   189,   190,   191,     0,   192,   193,   194,   195,   196,   197,
   198,   199,     0,     0,     0,     0,     0,   200,   201
};

static const short yycheck[] = {     1,
     1,    24,   211,    52,   301,     1,    13,    23,    89,    18,
    12,    13,    52,    20,    17,    18,   205,    13,    20,     1,
    64,    97,    13,    63,    20,   396,     1,    52,   217,    20,
    32,    75,   113,   222,    37,   406,   112,   113,    63,    79,
    23,    43,    49,    18,    23,    47,    47,    49,    52,    22,
    52,    47,    23,    49,    79,    18,    59,    80,    49,    61,
    76,   110,    17,    18,    70,    47,    68,   256,    70,    78,
    72,    70,    74,    74,    70,    79,    79,    79,    74,    70,
   269,   231,   271,    79,   160,   274,    17,    89,    79,   386,
    52,   388,    74,    95,    73,    97,    73,    76,   125,   126,
   397,    63,    73,    73,    59,    76,    61,   109,    17,    18,
   112,   113,   321,   109,    52,    17,    18,    79,   109,   121,
    17,    17,    75,   125,   126,   121,   128,   277,    59,   279,
    61,    52,   128,   283,   323,    17,   286,   326,   214,    63,
    17,    79,    63,   170,    69,   172,    17,    18,   175,    59,
    59,    61,    61,    63,    17,    18,    81,    59,   160,    61,
    73,   163,    59,    59,    61,    61,    37,    70,   170,    79,
   172,    17,    18,   175,    37,   202,   203,    59,    64,    61,
    69,    74,    59,    88,    61,    17,    18,    63,    59,    75,
    79,    37,    81,    59,    73,    61,    59,    76,    64,    73,
   202,   203,    17,    77,   206,    37,    75,    76,   235,   236,
   237,    73,   214,    59,    73,    77,   405,    76,   123,   124,
    73,    17,   127,   128,   129,   130,    75,    59,    77,     0,
     1,   258,     3,   235,   236,   237,    11,    63,    73,    74,
    11,    76,    63,    18,    19,    20,    21,    18,    19,    20,
    21,    22,    23,    66,    67,    30,   258,    63,    75,    30,
    77,    63,   258,    69,    17,    40,   171,    69,    39,    40,
   297,    69,    73,    79,   301,    81,    70,    79,    64,    81,
    75,    80,    63,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   199,   297,   377,    76,   300,   301,
   349,    64,    63,   208,   300,   301,   211,    64,   213,    64,
   337,    48,    49,    50,    51,    64,    53,    54,    55,    56,
    57,    58,    59,    60,    69,   230,    70,   232,    79,    66,
    67,    17,    52,    63,   239,   337,    64,    64,    73,    69,
    73,   343,   343,    80,    63,    17,    64,   343,   375,    79,
    69,    81,    75,   258,    63,    76,    11,    64,    74,   386,
    79,   388,    81,    18,    19,    20,    21,    64,    42,   396,
   397,    63,    43,   375,    63,    30,    63,    73,    17,   406,
    44,    45,    46,    47,   386,    40,   388,    64,    52,   294,
   386,    64,   388,    75,    64,   397,   301,    64,     1,    80,
     3,   397,    11,    31,    32,    33,    34,    63,    11,    18,
    19,    20,    21,    73,   319,    18,    19,    20,    21,    22,
    23,    30,    63,    17,    72,    59,    60,    30,    31,    32,
    33,    34,    66,    67,     0,   340,    46,    40,     0,     3,
   345,    99,    74,   348,     1,     1,   206,    11,    93,   354,
   355,   356,   357,   358,    18,    19,    20,    21,    22,    23,
    55,    56,    57,    58,    59,    60,    30,     1,    91,     3,
   338,    66,    67,   406,    77,    78,   341,    11,   383,   262,
   385,   386,    -1,   388,    18,    19,    20,    21,    22,    23,
   395,   396,   397,    -1,    -1,    -1,    30,    31,    32,    33,
    34,   406,     1,    -1,     3,     4,    40,     6,     7,    -1,
     9,    -1,    11,    -1,    13,    -1,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    -1,    -1,    -1,    -1,    35,    36,    37,    -1,
    -1,    -1,    -1,    77,    78,    24,    25,    26,    27,    28,
    29,    -1,    -1,    -1,    -1,    -1,    55,    56,    -1,    -1,
    59,    -1,    61,    62,    63,    -1,    -1,    66,    67,    -1,
    -1,    -1,    71,    -1,    -1,    -1,    -1,    76,    77,     1,
    -1,     3,     4,    -1,     6,     7,    -1,     9,    -1,    11,
    -1,    13,    -1,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    -1,
    -1,    -1,    -1,    35,    36,    37,    -1,    48,    49,    50,
    51,    -1,    53,    54,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    55,    56,    66,    67,    59,    -1,    61,
    62,    63,    73,    -1,    66,    67,    -1,    -1,    -1,    71,
    -1,    -1,    -1,    -1,    76,    77,     1,    -1,     3,     4,
    -1,     6,     7,    -1,     9,    -1,    11,    -1,    13,    -1,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
    35,    36,    37,    -1,    -1,    17,    18,    -1,    -1,    -1,
    -1,    -1,    24,    25,    26,    27,    28,    29,    -1,    -1,
    55,    56,    -1,    35,    59,    37,    61,    62,    63,    -1,
    -1,    66,    67,    -1,    -1,    -1,    71,    -1,    -1,    -1,
    -1,    76,    -1,    55,    56,    -1,    -1,    59,    -1,    61,
    62,    63,    11,    -1,    66,    67,    -1,    -1,    17,    18,
    19,    20,    21,    -1,    76,    24,    25,    26,    27,    28,
    29,    30,    17,    18,    -1,    -1,    35,    -1,    37,    24,
    25,    26,    27,    28,    29,    -1,    -1,    -1,    -1,    -1,
    35,    -1,    37,    -1,    -1,    -1,    55,    56,    -1,    -1,
    59,    -1,    61,    62,    63,    -1,    -1,    66,    67,    -1,
    55,    56,    -1,    -1,    59,    -1,    61,    62,    63,    -1,
    -1,    66,    67,    48,    49,    50,    51,    -1,    53,    54,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    -1,    66,    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    48,    49,    50,    51,    80,    53,    54,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    66,
    67,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    48,
    49,    50,    51,    80,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    -1,    66,    67,    48,
    49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    -1,    66,    67,    48,
    49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    -1,    66,    67,    48,
    49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    -1,    66,    67,    48,
    49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    64,    -1,    66,    67,    48,
    49,    50,    51,    -1,    53,    54,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    66,    67
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
		/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif


#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif


#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
   int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 107 "minic++.y"
{ progTree.head->node1=yyvsp[0].node; ;
    break;}
case 2:
#line 111 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::prog_decls); ;
    break;}
case 3:
#line 112 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::prog_decls,yyvsp[-1].node,yyvsp[0].node); ;
    break;}
case 4:
#line 113 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::prog_decls_error);;
    break;}
case 5:
#line 118 "minic++.y"
{  ;
    break;}
case 6:
#line 119 "minic++.y"
{  ;
    break;}
case 7:
#line 120 "minic++.y"
{ ;
    break;}
case 8:
#line 121 "minic++.y"
{;
    break;}
case 9:
#line 122 "minic++.y"
{  ;
    break;}
case 10:
#line 123 "minic++.y"
{  ;
    break;}
case 11:
#line 124 "minic++.y"
{ ;
    break;}
case 12:
#line 125 "minic++.y"
{  ;
    break;}
case 13:
#line 126 "minic++.y"
{ ;
    break;}
case 14:
#line 141 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_def,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 15:
#line 142 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::class_def,yyvsp[-4].node,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 16:
#line 146 "minic++.y"
{yyval.node=yyvsp[0].node;;
    break;}
case 17:
#line 150 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_public);;
    break;}
case 18:
#line 151 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_protected);;
    break;}
case 19:
#line 152 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_private);;
    break;}
case 20:
#line 153 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_friend);;
    break;}
case 22:
#line 158 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_base_list,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 23:
#line 159 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_base_list,yyvsp[-2].node);;
    break;}
case 24:
#line 163 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_body);;
    break;}
case 25:
#line 164 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::class_body,yyvsp[-2].node);;
    break;}
case 26:
#line 168 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::class_body_stmts,yyvsp[0].node);;
    break;}
case 27:
#line 169 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_body_stmts,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 28:
#line 173 "minic++.y"
{yyval.node=yyvsp[-1].node;
    break;}
case 34:
#line 179 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_body_stmt);;
    break;}
case 35:
#line 180 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_body_stmt);;
    break;}
case 36:
#line 188 "minic++.y"
{	yyval.node=new TreeRecord(yylsp[-4],NodeName::class_constructor_decl,yyvsp[-4].node,yyvsp[-2].node);;
    break;}
case 37:
#line 193 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::class_constructor,yyvsp[-7].node,yyvsp[-5].node,yyvsp[-3].node,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 38:
#line 196 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::class_constructor_init_list);;
    break;}
case 39:
#line 197 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_constructor_init_list,yyvsp[0].node);;
    break;}
case 40:
#line 201 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::c_c_init_list,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node);;
    break;}
case 41:
#line 202 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::c_c_init_list,yyvsp[-5].node,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node);;
    break;}
case 42:
#line 207 "minic++.y"
{	yyval.node=new TreeRecord(yylsp[-4],NodeName::class_destructor_decl,yyvsp[-3].node);;
    break;}
case 43:
#line 211 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_decl,yyvsp[-1].node);;
    break;}
case 44:
#line 215 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::func_decl,yyvsp[-6].node,yyvsp[-5].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node);;
    break;}
case 45:
#line 217 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::func_decl,yyvsp[-5].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node);	;
    break;}
case 46:
#line 219 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::func_decl,yyvsp[-7].node,yyvsp[-6].node,new TreeRecord(yylsp[-5],yyvsp[-5].ids),yyvsp[-3].node,new TreeRecord(yylsp[-1],"CONST"));;
    break;}
case 47:
#line 221 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::func_decl,yyvsp[-6].node,new TreeRecord(yylsp[-5],yyvsp[-5].ids),yyvsp[-3].node,new TreeRecord(yylsp[-1],"CONST"));;
    break;}
case 48:
#line 226 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_static);;
    break;}
case 49:
#line 227 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_const);;
    break;}
case 50:
#line 228 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_extern);;
    break;}
case 51:
#line 230 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_static_const);;
    break;}
case 52:
#line 232 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_static_const);;
    break;}
case 53:
#line 235 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::func_decl_args);;
    break;}
case 54:
#line 236 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::func_decl_args,yyvsp[0].node);;
    break;}
case 56:
#line 250 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::func_decl_arg_list,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 57:
#line 254 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::func_decl_arg_elem,yyvsp[0].node);;
    break;}
case 58:
#line 255 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::func_decl_arg_elem,yyvsp[-1].node,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 59:
#line 256 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::func_decl_arg_elem,yyvsp[-3].node,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 62:
#line 278 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::func_def_inline,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 63:
#line 279 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::func_def_inline,yyvsp[0].node);;
    break;}
case 64:
#line 283 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::func_def_normal,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 65:
#line 284 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::func_def_normal,yyvsp[0].node);;
    break;}
case 66:
#line 289 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::func_def_common,yyvsp[-5].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 67:
#line 291 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::func_def_common,yyvsp[-6].node,new TreeRecord(yylsp[-5],yyvsp[-5].ids),yyvsp[-3].node,new TreeRecord(yylsp[-1],"CONST"),yyvsp[0].node);;
    break;}
case 70:
#line 309 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_func_def_inline,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 71:
#line 310 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_func_def_inline,yyvsp[0].node);;
    break;}
case 72:
#line 314 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_func_def_normal,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 73:
#line 315 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::class_func_def_normal,yyvsp[0].node);;
    break;}
case 74:
#line 320 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::class_func_def_common,yyvsp[-7].node,yyvsp[-6].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 76:
#line 327 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::stmts,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 79:
#line 335 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::stmt_error);;
    break;}
case 80:
#line 336 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::stmt_error);;
    break;}
case 83:
#line 346 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::expr_stmt,yyvsp[0].node);;
    break;}
case 88:
#line 354 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::var_decl,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 89:
#line 355 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::var_decl,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 90:
#line 360 "minic++.y"
{ yyval.node=new TreeRecord(yylsp[0],NodeName::var_list_elem,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 91:
#line 362 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::var_list_elem,new TreeRecord(yylsp[-1],yyvsp[-1].ids),yyvsp[0].node);;
    break;}
case 92:
#line 364 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::var_list_elem,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 93:
#line 366 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::var_list_elem,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 95:
#line 382 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::var_list,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 96:
#line 384 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::var_constructor_call,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node);;
    break;}
case 98:
#line 397 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::array_dims,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 99:
#line 401 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::array_dim);;
    break;}
case 100:
#line 402 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_dim,new TreeRecord(yylsp[-1],yyvsp[-1].ids));;
    break;}
case 101:
#line 407 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list,yyvsp[-1].node);;
    break;}
case 102:
#line 408 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list,yyvsp[-1].node);;
    break;}
case 103:
#line 412 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::array_init_list_consts,yyvsp[0].node);;
    break;}
case 104:
#line 413 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list_consts,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 105:
#line 417 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::array_init_list_lists,yyvsp[0].node);;
    break;}
case 106:
#line 418 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list_lists,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 107:
#line 428 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::class_static_init_var,yyvsp[-5].node,yyvsp[-4].node,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 108:
#line 439 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::class_destructor,yyvsp[-6].node,yyvsp[-3].node,yyvsp[0].node);;
    break;}
case 109:
#line 443 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_NORMAL);;
    break;}
case 110:
#line 444 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_PLUS);;
    break;}
case 111:
#line 445 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_MINUS);;
    break;}
case 112:
#line 446 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_DIV);;
    break;}
case 113:
#line 447 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_MULT);;
    break;}
case 114:
#line 454 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::proc_call,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,NULL,Type::proc_call_normal);;
    break;}
case 115:
#line 456 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,new TreeRecord(yylsp[-5],yyvsp[-5].ids),new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,Type::PROC_CLASS_CALL);;
    break;}
case 116:
#line 458 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,NULL,Type::PROC_THIS_CALL);;
    break;}
case 117:
#line 460 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,yyvsp[-5].node,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,Type::PROC_CLASS_STATIC_CALL);;
    break;}
case 118:
#line 462 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,new TreeRecord(yylsp[-5],yyvsp[-5].ids),new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,Type::PROC_ARROW_CALL);;
    break;}
case 119:
#line 467 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::proc_expr_list);;
    break;}
case 120:
#line 468 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::proc_expr_list,yyvsp[0].node);;
    break;}
case 121:
#line 471 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::proc_expr_list_not_empty,yyvsp[0].node);;
    break;}
case 122:
#line 472 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::proc_expr_list_not_empty,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 123:
#line 477 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::jump_stmt,NULL,NULL,NULL,NULL,NULL,Type::break_type);;
    break;}
case 124:
#line 478 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::jump_stmt,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::return_expr_type);;
    break;}
case 125:
#line 479 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::jump_stmt,NULL,NULL,NULL,NULL,NULL,Type::continue_type);;
    break;}
case 126:
#line 480 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::jump_stmt,NULL,NULL,NULL,NULL,NULL,Type::return_type);;
    break;}
case 127:
#line 484 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cin_stmt,yyvsp[0].node);;
    break;}
case 129:
#line 489 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cin_stmt_input_list,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 130:
#line 492 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::input_elem,yyvsp[0].node);;
    break;}
case 131:
#line 496 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cout_stmt,yyvsp[0].node);;
    break;}
case 133:
#line 502 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cout_stmt_output_list,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 134:
#line 505 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::output_elem,yyvsp[0].node);;
    break;}
case 138:
#line 513 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::compound_block_stmt,yyvsp[0].node);;
    break;}
case 139:
#line 518 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::block_stmt);;
    break;}
case 140:
#line 520 "minic++.y"
{ yyval.node=new TreeRecord(yylsp[-2],NodeName::block_stmt,yyvsp[-1].node);;
    break;}
case 141:
#line 524 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::if_stmt,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 142:
#line 525 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::if_else_stmt,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 143:
#line 532 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-8],NodeName::for_stmt,yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 144:
#line 539 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::for_itr,yyvsp[0].node);;
    break;}
case 145:
#line 540 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::for_itr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 146:
#line 544 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::for_itr_elem_expr,yyvsp[0].node);;
    break;}
case 148:
#line 550 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::while_stmt,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 151:
#line 560 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_int);;
    break;}
case 152:
#line 561 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_double);;
    break;}
case 153:
#line 562 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_bool);;
    break;}
case 154:
#line 563 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_char);;
    break;}
case 155:
#line 564 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_void);;
    break;}
case 159:
#line 581 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::pointer_type,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::pointer_type);;
    break;}
case 160:
#line 584 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::reference_type,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::reference_type);;
    break;}
case 168:
#line 595 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::bracket_expr,yyvsp[-1].node);;
    break;}
case 169:
#line 605 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::int_const_expr,yyvsp[0].ids,Type::type_int);;
    break;}
case 170:
#line 606 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::double_const_expr,yyvsp[0].ids,Type::type_double);;
    break;}
case 171:
#line 607 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::char_const_expr,yyvsp[0].ids,Type::type_char);;
    break;}
case 172:
#line 608 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::str_const_expr,yyvsp[0].ids,Type::type_str);;
    break;}
case 173:
#line 609 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::false_const_expr,yyvsp[0].ids,Type::type_false);;
    break;}
case 174:
#line 610 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::true_const_expr,yyvsp[0].ids,Type::type_true);;
    break;}
case 176:
#line 616 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_class_expr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 177:
#line 617 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_pointer_expr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 179:
#line 619 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::id_name_expr,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 180:
#line 620 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::this_expr);;
    break;}
case 181:
#line 621 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_var_expr,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 182:
#line 623 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::scope_expr,yyvsp[-2].node,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 183:
#line 625 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::id_arrow_expr,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 184:
#line 626 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::this_arrow_expr,yyvsp[0].node);;
    break;}
case 185:
#line 635 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::array_expr,new TreeRecord(yylsp[-1],yyvsp[-1].ids),yyvsp[0].node);;
    break;}
case 186:
#line 638 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_expr_dims,yyvsp[-1].node);;
    break;}
case 187:
#line 639 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::array_expr_dims,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 188:
#line 643 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::pointer_val_expr,yyvsp[0].node);;
    break;}
case 189:
#line 648 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::NOT);;
    break;}
case 190:
#line 649 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::MINUS);;
    break;}
case 191:
#line 650 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::left_icr);;
    break;}
case 192:
#line 651 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::right_icr);;
    break;}
case 193:
#line 652 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::left_decr);;
    break;}
case 194:
#line 653 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::right_decr);;
    break;}
case 195:
#line 654 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::and);;
    break;}
case 196:
#line 655 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::PLUS);;
    break;}
case 199:
#line 665 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::PLUS);;
    break;}
case 200:
#line 666 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::MINUS);;
    break;}
case 201:
#line 667 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::DIV);;
    break;}
case 202:
#line 668 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::MULT);;
    break;}
case 203:
#line 672 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::LESS);;
    break;}
case 204:
#line 673 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::GREATER);;
    break;}
case 205:
#line 674 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::LEQ);;
    break;}
case 206:
#line 675 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::GEQ);;
    break;}
case 207:
#line 676 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::EQL);;
    break;}
case 208:
#line 677 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::NEQ);;
    break;}
case 209:
#line 678 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::oror);;
    break;}
case 210:
#line 679 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::andand);;
    break;}
case 212:
#line 687 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::new_array_expr,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 213:
#line 688 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::new_expr,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 214:
#line 699 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::delete_stmt,yyvsp[0].node);;
    break;}
case 215:
#line 700 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::delete_stmt,yyvsp[0].node);;
    break;}
case 216:
#line 703 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::cast_expr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 217:
#line 753 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],yyvsp[0].ids,NULL,NULL,NULL,NULL,NULL,Type::class_type);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 756 "minic++.y"




int yyerror (char *s)
{
  fprintf (stderr, "%s\n", s);
  return 0;
}

/* i have no idea what this function does, but the VC++ gives me a linker error from the
	lexer, so i defined it.
	when i returned 1 i got syntax errors when i execute the generated compier
	and 0 it gives right result at run time????????????????????????????
*/
int isatty(int x){
	return 0;
}

/* initila adding to symbol table 
Record* add2symtab(char* name){
	return symtab.addRecord(Record(name,cur_par->depth+1,cur_par));
}

// restoring parent scopes must be done acurately or things won't work right 
void restorePar(){
	cur_par=cur_par->parent;
}
*/

char* concat(char* first, char* second){
	int flen=strlen(first);
	int slen=strlen(second);
	
	strncpy(name_buffer,first,flen);
	name_buffer[flen]='\0';
	strncat(name_buffer,second,slen);
	name_buffer[flen+slen]='\0';
	
	return name_buffer;
}