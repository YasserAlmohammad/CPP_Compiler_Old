
/*  A Bison parser, made from minic++.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define YYLSP_NEEDED

#define	EXTERN	258
#define	NULL_TYPE	259
#define	CIN	260
#define	DEFINE	261
#define	BREAK	262
#define	COUT	263
#define	UNDEF	264
#define	FOR	265
#define	TYPEDEF_ID	266
#define	DOUBLE	267
#define	INCLUDE	268
#define	RETURN	269
#define	DO	270
#define	WHILE	271
#define	CONTINUE	272
#define	ID_NAME	273
#define	CLASS_ID	274
#define	INT	275
#define	BOOL_TYPE	276
#define	CHAR	277
#define	STATIC	278
#define	CONST	279
#define	INTEGER_CONST	280
#define	DOUBLE_CONST	281
#define	STRING_CONST	282
#define	CHARACTER_CONST	283
#define	FALSE_CONST	284
#define	TRUE_CONST	285
#define	VOID	286
#define	PUBLIC	287
#define	PROTECTED	288
#define	PRIVATE	289
#define	FRIEND	290
#define	NEW	291
#define	DELETE	292
#define	THIS	293
#define	OPERATOR	294
#define	CLASS	295
#define	INLINE	296
#define	VIRTUAL	297
#define	INPUT_VAR_SYM	298
#define	OUTPUT_VAR_SYM	299
#define	PLUS_EQ	300
#define	MULT_EQ	301
#define	MINUS_EQ	302
#define	DIV_EQ	303
#define	LE	304
#define	GE	305
#define	EQ	306
#define	NE	307
#define	OROR	308
#define	ANDAND	309
#define	POS_NEG	310
#define	ICR	311
#define	DECR	312
#define	LAST_PREC	313
#define	ARROW	314
#define	SCOPE_DOTS	315
#define	IF	316
#define	ELSE	317

#line 1 "minic++.y"

#include <stdio.h>
#include <iostream.h>
#include <string.h>
#include "malloc.h"
//#include "symbol_table.h"
#include "prog_tree.h"
#include "errorReporting.h"

#line 14 "minic++.y"
typedef union{
	TreeRecord* node;
	char*	ids;
} YYSTYPE;
#line 19 "minic++.y"

/*************** Includes and Defines *****************************/
#define YYDEBUG 1        /* get the pretty debugging code to compile*/
//#define YYSTYPE  char*  /* interface with flex: should be in header file */
extern FILE* yyin;
extern int yylex();	
extern int yyparse();
extern int yyerror(char*);
extern SymbolTable symtab;
//extern Record* cur_par; //initially this record contains the file scope record
//depth value used with name of id to make a unique id in a scope
//current parent
extern ProgTree progTree;
//Record* tempPar=NULL;

//Record* add2symtab(char* name);
//void restorePar();
YYSTYPE yylval;

char name_buffer[100]={0};

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		430
#define	YYFLAG		-32768
#define	YYNTBASE	83

#define YYTRANSLATE(x) ((unsigned)(x) <= 317 ? yytranslate[x] : 163)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    63,     2,     2,     2,     2,    62,     2,    64,
    65,    60,    56,    76,    57,    82,    61,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    75,    74,    54,
    53,    55,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    80,     2,    81,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    77,     2,    78,    79,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    58,    59,    66,
    67,    68,    69,    70,    71,    72,    73
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     9,    12,    14,    16,    18,    20,
    22,    25,    27,    29,    32,    38,    43,    46,    48,    50,
    52,    54,    56,    58,    62,    66,    70,    75,    77,    80,
    83,    85,    87,    90,    92,    94,    97,   100,   106,   115,
   116,   119,   125,   130,   137,   143,   146,   154,   161,   170,
   178,   180,   182,   184,   187,   190,   191,   193,   195,   199,
   201,   204,   209,   211,   213,   217,   220,   223,   225,   232,
   240,   242,   244,   248,   251,   254,   256,   265,   267,   270,
   273,   275,   278,   281,   283,   285,   287,   289,   291,   293,
   295,   299,   302,   304,   307,   311,   316,   318,   322,   327,
   329,   332,   335,   339,   343,   347,   349,   353,   355,   359,
   366,   374,   378,   382,   386,   390,   394,   399,   406,   413,
   420,   427,   428,   430,   432,   436,   438,   441,   443,   445,
   448,   450,   453,   456,   459,   461,   464,   467,   469,   471,
   473,   475,   478,   482,   488,   496,   501,   511,   520,   522,
   526,   528,   530,   536,   538,   540,   542,   544,   546,   548,
   550,   552,   554,   556,   559,   562,   564,   566,   568,   570,
   572,   574,   576,   580,   582,   584,   586,   588,   590,   592,
   594,   596,   600,   604,   606,   608,   610,   614,   618,   622,
   626,   629,   633,   638,   641,   644,   647,   650,   653,   656,
   659,   662,   665,   667,   669,   673,   677,   681,   685,   689,
   693,   697,   701,   705,   709,   713,   717,   719,   725,   731,
   734,   739,   744
};

static const short yyrhs[] = {    84,
     0,     0,    84,    85,     0,    84,     1,     0,   115,    74,
     0,    99,     0,   104,     0,    98,     0,   108,     0,    86,
     0,   123,    74,     0,   124,     0,    94,     0,    87,    90,
     0,    87,    75,    88,    89,    90,     0,    87,    88,    89,
    90,     0,    40,   162,     0,    32,     0,    33,     0,    34,
     0,    35,     0,     1,     0,   162,     0,    89,    76,   162,
     0,    89,    76,     1,     0,    77,    78,    74,     0,    77,
    91,    78,    74,     0,    92,     0,    91,    92,     0,    88,
    75,     0,    99,     0,   104,     0,   115,    74,     0,    93,
     0,    97,     0,     1,    74,     0,     1,    78,     0,   162,
    64,   101,    65,    74,     0,   162,    71,   162,    64,   101,
    65,    95,   137,     0,     0,    75,    96,     0,    75,   162,
    64,   127,    65,     0,    18,    64,   148,    65,     0,    96,
    76,    18,    64,   148,    65,     0,    79,   162,    64,    65,
    74,     0,    87,    74,     0,   100,   143,    18,    64,   101,
    65,    74,     0,   143,    18,    64,   101,    65,    74,     0,
   100,   143,    18,    64,   101,    65,    24,    74,     0,   143,
    18,    64,   101,    65,    24,    74,     0,    23,     0,    24,
     0,     3,     0,    23,    24,     0,    24,    23,     0,     0,
   102,     0,   103,     0,   102,    76,   103,     0,   143,     0,
   143,    18,     0,   143,    18,    53,   149,     0,   105,     0,
   106,     0,   100,    41,   107,     0,    41,   107,     0,   100,
   107,     0,   107,     0,   143,    18,    64,   101,    65,   137,
     0,   143,    18,    64,   101,    65,    24,   137,     0,   109,
     0,   110,     0,   100,    41,   111,     0,    41,   111,     0,
   100,   111,     0,   111,     0,   143,   162,    71,    18,    64,
   101,    65,   137,     0,   113,     0,   112,   113,     0,   114,
    74,     0,   136,     0,     1,    74,     0,     1,    78,     0,
   115,     0,   125,     0,   148,     0,   129,     0,   130,     0,
   133,     0,   160,     0,   100,   143,   117,     0,   143,   117,
     0,    18,     0,    18,   118,     0,    18,    53,   148,     0,
    18,   118,    53,   120,     0,   116,     0,   117,    76,   116,
     0,    18,    64,   128,    65,     0,   119,     0,   118,   119,
     0,    80,    81,     0,    80,    25,    81,     0,    77,   121,
    78,     0,    77,   122,    78,     0,   148,     0,   121,    76,
   148,     0,   120,     0,   122,    76,   120,     0,   143,   162,
    71,    18,    53,   148,     0,   162,    71,    79,   162,    64,
    65,   137,     0,   150,    53,   148,     0,   150,    45,   148,
     0,   150,    47,   148,     0,   150,    48,   148,     0,   150,
    46,   148,     0,    18,    64,   127,    65,     0,    18,    82,
    18,    64,   127,    65,     0,    38,    70,    18,    64,   127,
    65,     0,   162,    71,    18,    64,   127,    65,     0,    18,
    70,    18,    64,   127,    65,     0,     0,   128,     0,   148,
     0,   128,    76,   148,     0,     7,     0,    14,   148,     0,
    17,     0,    14,     0,     5,   131,     0,   132,     0,   131,
   132,     0,    43,   150,     0,     8,   134,     0,   135,     0,
   134,   135,     0,    44,   148,     0,   138,     0,   139,     0,
   142,     0,   137,     0,    77,    78,     0,    77,   112,    78,
     0,    72,    64,   148,    65,   113,     0,    72,    64,   148,
    65,   113,    73,   113,     0,    72,   148,    78,   113,     0,
    10,    64,   115,    74,   148,    74,   140,    65,   113,     0,
    10,   115,    74,   148,    74,   140,    65,   113,     0,   141,
     0,   140,    76,   141,     0,   148,     0,   125,     0,    16,
    64,   148,    65,   113,     0,   144,     0,   145,     0,    20,
     0,    12,     0,    21,     0,    22,     0,    31,     0,   146,
     0,   147,     0,   162,     0,   143,    60,     0,   143,    62,
     0,   149,     0,   150,     0,   154,     0,   155,     0,   158,
     0,   126,     0,   161,     0,    64,   148,    65,     0,    25,
     0,    26,     0,    28,     0,    27,     0,    29,     0,    30,
     0,     4,     0,   151,     0,   151,    82,   150,     0,   151,
    70,   150,     0,   153,     0,    18,     0,    38,     0,    18,
    82,   150,     0,   162,    71,    18,     0,    18,    70,   150,
     0,    38,    70,   150,     0,    18,   152,     0,    80,   148,
    81,     0,   152,    80,   148,    81,     0,    60,   150,     0,
    63,   148,     0,    57,   148,     0,    67,   148,     0,   148,
    67,     0,    68,   148,     0,   148,    68,     0,    62,   150,
     0,    56,   148,     0,   156,     0,   157,     0,   148,    56,
   148,     0,   148,    57,   148,     0,   148,    61,   148,     0,
   148,    60,   148,     0,   148,    54,   148,     0,   148,    55,
   148,     0,   148,    49,   148,     0,   148,    50,   148,     0,
   148,    51,   148,     0,   148,    52,   148,     0,   148,    58,
   148,     0,   148,    59,   148,     0,   159,     0,    36,   143,
    80,   148,    81,     0,    36,   143,    64,   127,    65,     0,
    37,   150,     0,    37,    80,    81,   150,     0,    64,   143,
    65,   148,     0,    19,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   107,   111,   113,   114,   117,   120,   121,   122,   123,   124,
   125,   126,   127,   141,   143,   144,   148,   152,   154,   155,
   156,   157,   161,   163,   164,   167,   169,   172,   174,   177,
   179,   180,   181,   182,   183,   184,   185,   191,   196,   201,
   202,   203,   207,   209,   212,   216,   219,   222,   224,   226,
   231,   233,   234,   235,   237,   241,   242,   254,   256,   259,
   261,   262,   279,   281,   283,   285,   288,   290,   293,   296,
   309,   311,   314,   316,   319,   321,   324,   331,   333,   338,
   340,   341,   342,   349,   351,   352,   353,   354,   355,   356,
   359,   361,   364,   367,   369,   371,   386,   388,   389,   401,
   403,   406,   408,   412,   414,   417,   419,   422,   424,   433,
   444,   448,   450,   451,   452,   453,   458,   461,   463,   465,
   467,   472,   473,   475,   477,   481,   483,   484,   485,   488,
   492,   494,   496,   500,   505,   507,   509,   514,   516,   517,
   518,   522,   524,   528,   530,   531,   539,   541,   549,   551,
   554,   556,   560,   565,   567,   570,   572,   573,   574,   575,
   579,   581,   582,   591,   594,   598,   600,   601,   602,   603,
   604,   605,   606,   615,   617,   618,   619,   620,   621,   622,
   627,   629,   630,   631,   632,   633,   634,   635,   637,   639,
   647,   650,   652,   655,   660,   662,   663,   664,   665,   666,
   667,   668,   672,   674,   676,   678,   679,   680,   684,   686,
   687,   688,   689,   690,   691,   692,   695,   699,   701,   711,
   713,   715,   765
};

static const char * const yytname[] = {   "$","error","$undefined.","EXTERN",
"NULL_TYPE","CIN","DEFINE","BREAK","COUT","UNDEF","FOR","TYPEDEF_ID","DOUBLE",
"INCLUDE","RETURN","DO","WHILE","CONTINUE","ID_NAME","CLASS_ID","INT","BOOL_TYPE",
"CHAR","STATIC","CONST","INTEGER_CONST","DOUBLE_CONST","STRING_CONST","CHARACTER_CONST",
"FALSE_CONST","TRUE_CONST","VOID","PUBLIC","PROTECTED","PRIVATE","FRIEND","NEW",
"DELETE","THIS","OPERATOR","CLASS","INLINE","VIRTUAL","INPUT_VAR_SYM","OUTPUT_VAR_SYM",
"PLUS_EQ","MULT_EQ","MINUS_EQ","DIV_EQ","LE","GE","EQ","NE","'='","'<'","'>'",
"'+'","'-'","OROR","ANDAND","'*'","'/'","'&'","'!'","'('","')'","POS_NEG","ICR",
"DECR","LAST_PREC","ARROW","SCOPE_DOTS","IF","ELSE","';'","':'","','","'{'",
"'}'","'~'","'['","']'","'.'","program","prog_decls","declaration","class_def",
"class_head","access_spec","class_base_list","class_body","class_body_stmts",
"class_body_stmt","class_constructor_decl","class_constructor","class_constructor_init_list",
"c_c_init_list","class_destructor_decl","class_decl","func_decl","storage_spec",
"func_decl_args","func_decl_arg_list","func_decl_arg_elem","func_def","func_def_inline",
"func_def_normal","func_def_common","class_func_def","class_func_def_inline",
"class_func_def_normal","class_func_def_common","stmts","stmt","simple_stmt",
"var_decl","var_list_elem","var_list","array_dims","array_dim","array_init_list",
"array_init_list_consts","array_init_list_lists","class_static_init_var","class_destructor",
"assignment","proc_call","proc_expr_list","proc_expr_list_not_empty","jump_stmt",
"cin_stmt","cin_stmt_input_list","input_elem","cout_stmt","cout_stmt_output_list",
"output_elem","compound_stmt","block_stmt","if_stmt","for_stmt","for_itr","for_itr_elem",
"while_stmt","type","simple_type","complex_type","pointer_type","reference_type",
"expr","const_expr","var_expr","array_expr","array_expr_dims","pointer_val_expr",
"unary_expr","binary_expr","math_operation_expr","logical_operation_expr","allocate_expr",
"new_expr","delete_stmt","cast_expr","class_type",""
};
#endif

static const short yyr1[] = {     0,
    83,    84,    84,    84,    85,    85,    85,    85,    85,    85,
    85,    85,    85,    86,    86,    86,    87,    88,    88,    88,
    88,    88,    89,    89,    89,    90,    90,    91,    91,    92,
    92,    92,    92,    92,    92,    92,    92,    93,    94,    95,
    95,    95,    96,    96,    97,    98,    99,    99,    99,    99,
   100,   100,   100,   100,   100,   101,   101,   102,   102,   103,
   103,   103,   104,   104,   105,   105,   106,   106,   107,   107,
   108,   108,   109,   109,   110,   110,   111,   112,   112,   113,
   113,   113,   113,   114,   114,   114,   114,   114,   114,   114,
   115,   115,   116,   116,   116,   116,   117,   117,   117,   118,
   118,   119,   119,   120,   120,   121,   121,   122,   122,   123,
   124,   125,   125,   125,   125,   125,   126,   126,   126,   126,
   126,   127,   127,   128,   128,   129,   129,   129,   129,   130,
   131,   131,   132,   133,   134,   134,   135,   136,   136,   136,
   136,   137,   137,   138,   138,   138,   139,   139,   140,   140,
   141,   141,   142,   143,   143,   144,   144,   144,   144,   144,
   145,   145,   145,   146,   147,   148,   148,   148,   148,   148,
   148,   148,   148,   149,   149,   149,   149,   149,   149,   149,
   150,   150,   150,   150,   150,   150,   150,   150,   150,   150,
   151,   152,   152,   153,   154,   154,   154,   154,   154,   154,
   154,   154,   155,   155,   156,   156,   156,   156,   157,   157,
   157,   157,   157,   157,   157,   157,   158,   159,   159,   160,
   160,   161,   162
};

static const short yyr2[] = {     0,
     1,     0,     2,     2,     2,     1,     1,     1,     1,     1,
     2,     1,     1,     2,     5,     4,     2,     1,     1,     1,
     1,     1,     1,     3,     3,     3,     4,     1,     2,     2,
     1,     1,     2,     1,     1,     2,     2,     5,     8,     0,
     2,     5,     4,     6,     5,     2,     7,     6,     8,     7,
     1,     1,     1,     2,     2,     0,     1,     1,     3,     1,
     2,     4,     1,     1,     3,     2,     2,     1,     6,     7,
     1,     1,     3,     2,     2,     1,     8,     1,     2,     2,
     1,     2,     2,     1,     1,     1,     1,     1,     1,     1,
     3,     2,     1,     2,     3,     4,     1,     3,     4,     1,
     2,     2,     3,     3,     3,     1,     3,     1,     3,     6,
     7,     3,     3,     3,     3,     3,     4,     6,     6,     6,
     6,     0,     1,     1,     3,     1,     2,     1,     1,     2,
     1,     2,     2,     2,     1,     2,     2,     1,     1,     1,
     1,     2,     3,     5,     7,     4,     9,     8,     1,     3,
     1,     1,     5,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     3,     1,     1,     1,     3,     3,     3,     3,
     2,     3,     4,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     1,     5,     5,     2,
     4,     4,     1
};

static const short yydefact[] = {     2,
     0,     4,    53,   157,   223,   156,   158,   159,    51,    52,
   160,     0,     0,     3,    10,     0,    13,     8,     6,     0,
     7,    63,    64,    68,     9,    71,    72,    76,     0,     0,
    12,     0,   154,   155,   161,   162,   163,    54,    55,    17,
    66,    74,     0,   163,    22,    18,    19,    20,    21,    46,
     0,     0,     0,    14,     0,    67,    75,     0,     5,    11,
    93,   164,   165,    97,    92,     0,     0,     0,     0,     0,
    22,     0,     0,     0,     0,     0,    28,    34,    35,    31,
     0,    32,     0,     0,   163,     0,    23,    65,    73,    93,
    91,     0,    56,     0,    94,   100,     0,     0,     0,     0,
    56,     0,     0,    36,    37,     0,    26,     0,    30,     0,
    29,     0,     0,    33,    56,     0,    16,    56,   180,   185,
   174,   175,   177,   176,   178,   179,     0,   186,     0,     0,
     0,     0,     0,     0,     0,     0,   171,    95,   166,   167,
   181,   184,   168,   169,   203,   204,   170,   217,   172,     0,
     0,    57,    58,     0,    60,   124,   163,     0,   102,     0,
   101,    93,    98,     0,     0,    56,     0,     0,    15,     0,
    27,     0,    25,    24,     0,   122,     0,     0,     0,   191,
     0,     0,   202,   196,   185,   186,   194,     0,   201,   195,
     0,     0,   197,   199,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   198,   200,     0,     0,
     0,     0,     0,    99,     0,    61,   103,     0,    96,     0,
    56,     0,     0,     0,     0,     0,     0,     0,   123,   185,
   189,     0,   185,   187,     0,   122,     0,   185,   190,     0,
     0,     0,     0,     0,   173,   211,   212,   213,   214,   209,
   210,   205,   206,   215,   216,   208,   207,   183,   182,   188,
     0,    48,     0,    69,    59,   125,     0,   108,     0,     0,
   106,   110,     0,     0,    40,     0,    45,    38,     0,    47,
   117,   122,   192,   122,     0,     0,     0,   122,   188,   222,
   122,    50,    70,     0,     0,   126,     0,     0,   129,     0,
   128,     0,     0,   142,     0,     0,    78,     0,    84,    85,
    87,    88,    89,    81,   141,   138,   139,   140,     0,    86,
   167,    90,    62,     0,   104,     0,   105,     0,   111,     0,
     0,    49,     0,     0,   193,   219,   218,     0,     0,    82,
    83,     0,   130,   131,     0,   134,   135,     0,     0,   127,
     0,     0,   220,     0,     0,     0,   143,    79,    80,    93,
     0,     0,     0,     0,     0,   107,   109,    77,     0,    41,
     0,    39,   121,   118,   119,   120,   133,   132,   137,   136,
     0,     0,     0,     0,     0,     0,     0,   113,   116,   114,
   115,   112,     0,     0,   122,     0,     0,     0,   221,     0,
   146,     0,     0,     0,     0,     0,   153,   144,    43,     0,
    42,     0,   152,     0,   149,   151,     0,     0,     0,     0,
     0,   145,    44,     0,   148,   150,   147,     0,     0,     0
};

static const short yydefgoto[] = {   428,
     1,    14,    15,    16,    75,    86,    54,    76,    77,    78,
    17,   331,   370,    79,    18,    80,   305,   151,   152,   153,
    82,    22,    23,    24,    25,    26,    27,    28,   306,   307,
   308,   309,    64,    65,    95,    96,   219,   269,   270,    30,
    31,   310,   137,   228,   229,   311,   312,   343,   344,   313,
   346,   347,   314,   315,   316,   317,   414,   415,   318,   319,
    33,    34,    35,    36,   156,   139,   140,   141,   180,   142,
   143,   144,   145,   146,   147,   148,   322,   149,   150
};

static const short yypact[] = {-32768,
   442,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    -9,   -18,
-32768,    22,   511,-32768,-32768,   115,-32768,-32768,-32768,   323,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -49,     0,
-32768,   110,-32768,-32768,-32768,-32768,    16,-32768,-32768,-32768,
-32768,-32768,   182,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   252,   194,    22,-32768,   511,-32768,-32768,   185,-32768,-32768,
    40,-32768,-32768,-32768,    25,    34,   -16,    49,    48,    22,
   -41,   511,    58,    22,    69,   247,-32768,-32768,-32768,-32768,
   384,-32768,    77,   104,   116,   199,-32768,-32768,-32768,    54,
    25,   907,   860,   -19,   -32,-32768,   167,   187,    22,   147,
   511,   219,   199,-32768,-32768,   107,-32768,   179,-32768,   172,
-32768,   511,   124,-32768,   511,    37,-32768,   860,-32768,   257,
-32768,-32768,-32768,-32768,-32768,-32768,   511,   213,   907,   907,
   -11,   -11,   907,   860,   907,   907,-32768,  1176,-32768,-32768,
   -36,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   178,
   195,   188,-32768,   -26,   159,  1176,   178,   208,-32768,   246,
-32768,     6,-32768,   118,   260,   511,   265,   267,-32768,   281,
-32768,   283,-32768,-32768,   301,   907,   214,   907,   272,   285,
   253,   274,-32768,-32768,   181,   297,-32768,   309,-32768,-32768,
   290,  1076,-32768,-32768,   907,   907,   907,   907,   907,   907,
   907,   907,   907,   907,   907,   907,-32768,-32768,   -11,   -11,
   363,    20,   511,-32768,   907,   329,-32768,   806,-32768,   907,
   511,   319,   321,   -10,   313,   315,    85,   325,   316,   258,
-32768,   945,   331,-32768,   907,   907,   907,   357,-32768,   -11,
   -11,   -11,   376,   907,-32768,   789,   789,   789,   789,   789,
   789,    28,    28,    28,    28,   190,   190,-32768,-32768,   338,
   125,-32768,   484,-32768,-32768,  1176,   332,-32768,   218,   222,
  1176,  1176,   342,   341,   334,   341,-32768,-32768,   157,-32768,
-32768,   907,-32768,   907,   978,   359,  1006,   907,-32768,-32768,
   907,-32768,-32768,    82,   379,-32768,   385,   429,   907,   364,
-32768,    -2,   954,-32768,   511,   673,-32768,   356,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   176,  1176,
   422,-32768,-32768,   907,-32768,   246,-32768,   341,-32768,   300,
   341,-32768,   368,   375,-32768,-32768,-32768,   381,   382,-32768,
-32768,   -11,   379,-32768,   907,   385,-32768,   781,   370,  1176,
   907,   374,-32768,   860,   664,   176,-32768,-32768,-32768,    88,
   907,   907,   907,   907,   907,  1176,-32768,-32768,   392,   383,
   393,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1176,-32768,
   397,   907,  1096,   -11,  1116,   751,   907,  1176,  1176,  1176,
  1176,  1176,   907,   440,   907,   907,  1034,   751,-32768,   595,
-32768,  1136,   410,   412,  1055,   907,-32768,   405,-32768,   907,
-32768,   907,-32768,    98,-32768,  1176,   751,  1156,   122,   751,
   907,-32768,-32768,   751,-32768,-32768,-32768,   480,   481,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,     4,   414,   -58,-32768,   419,-32768,
-32768,-32768,-32768,-32768,-32768,   485,     8,   -83,-32768,   277,
   498,-32768,-32768,    27,-32768,-32768,-32768,    10,-32768,  -263,
-32768,     1,   420,   -45,-32768,   421,  -214,-32768,-32768,-32768,
-32768,  -233,-32768,  -212,   -92,-32768,-32768,-32768,   183,-32768,
-32768,   193,-32768,  -121,-32768,-32768,   113,   108,-32768,     9,
-32768,-32768,-32768,-32768,   173,   261,    14,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    -1
};


#define	YYLAST		1244


static const short yytable[] = {    37,
   154,    29,     5,   268,    39,   158,   185,     5,    20,    32,
    40,    44,    91,   276,    38,   185,     5,   167,    44,    53,
   160,    43,    42,   286,    59,   154,   186,   117,    58,    57,
    66,   172,   104,   209,   175,   186,   105,   173,   214,    41,
     5,    69,   358,   261,   169,   210,    56,    94,   131,   215,
    85,    87,    83,    44,    70,     5,    69,   131,    92,    81,
    84,   159,    99,    43,    89,   100,   263,    91,    87,   333,
    44,   334,   108,    60,    85,   338,    83,   352,   339,    44,
   106,    88,   223,    81,    84,    94,    67,   205,   206,   113,
   264,   157,    92,   262,   207,   208,   263,   165,    41,    44,
    97,   155,   264,    93,    98,   264,    92,    56,   279,   155,
    44,   367,   101,    44,   174,    45,   157,   118,   102,    94,
   106,    61,   401,   155,    68,    44,   155,    61,     5,   188,
   188,   107,   157,    94,   407,   181,   408,   273,    88,   293,
    92,    90,   191,   109,   187,   189,    46,    47,    48,    49,
   114,   387,   329,   422,   293,   340,   425,   293,   280,   341,
   427,   263,   420,    62,    44,    63,    62,    94,    63,    62,
   220,    63,   413,   421,   155,   188,   216,   188,   413,   115,
   188,   221,   404,    62,   162,    63,   424,   413,    50,    51,
   231,    52,   234,   360,    71,   239,     3,   421,   292,    68,
     5,   263,    90,     5,   164,     4,   368,   188,   188,   372,
   166,    44,     5,     6,     7,     8,     9,    10,    62,    44,
    63,   155,   258,   259,    11,    46,    47,    48,    49,   155,
   332,   230,     5,   263,    72,    62,   168,    63,   188,   188,
   188,    62,   170,    63,    62,   171,    63,    71,   211,     3,
   240,   186,    45,   231,   234,   239,   207,   208,     4,   212,
   178,   157,   241,   213,   138,     5,     6,     7,     8,     9,
    10,    73,    74,   131,   116,    52,   321,    11,    46,    47,
    48,    49,   182,    46,    47,    48,    49,    72,   217,   233,
     5,   238,     5,   324,   154,   325,    44,   326,   349,   327,
   188,   183,   184,    44,   157,   190,   192,   193,   194,   186,
    91,   186,    62,   356,    63,   353,   236,   369,     5,   321,
   176,   282,   218,   222,   110,    74,   177,   240,   371,   224,
   221,   131,   237,   131,     4,   119,   178,   178,   179,   241,
   188,     5,     6,     7,     8,   225,    44,   226,   381,    62,
   232,    63,   157,    11,   244,   377,   121,   122,   123,   124,
   125,   126,   191,    55,   235,   227,   242,   246,   247,   248,
   249,   250,   251,   252,   253,   254,   255,   256,   257,   243,
   260,   267,   188,   274,   157,   275,   277,   266,   278,   281,
   271,   215,   272,   289,   284,     4,   157,   399,   157,   321,
   240,   291,     5,     6,     7,     8,   328,   285,   330,   287,
   178,   321,   241,   321,    11,   157,   290,   263,   157,   321,
   288,   342,   157,   336,   112,   321,   240,   351,   345,   359,
   321,     3,   373,   321,   321,   320,   178,   321,   241,   374,
     4,    -1,     2,   382,     3,   375,   376,     5,     6,     7,
     8,     9,    10,     4,   384,   393,   395,   403,   394,    11,
     5,     6,     7,     8,     9,    10,   361,   362,   363,   364,
   396,   350,    11,   410,   365,   355,   411,   417,   320,   429,
   430,    12,    13,   103,   294,    19,     3,   119,   295,   265,
   296,   297,   348,   298,   111,     4,   366,   299,    21,   300,
   301,   120,     5,     6,     7,     8,     9,    10,   121,   122,
   123,   124,   125,   126,    11,   161,   163,   379,     0,   127,
   302,   128,     4,   383,   419,   378,   385,   323,   426,     5,
     6,     7,     8,   388,   389,   390,   391,   392,   380,   129,
   130,    11,     0,   131,     0,   132,   133,   134,     0,     0,
   135,   136,     0,     0,   397,   303,     0,     0,   320,     0,
   263,   304,     0,     0,     0,   402,     0,     0,   405,     0,
   320,     0,   320,     0,     0,     0,     0,     0,   416,     0,
     0,     0,   418,     0,   416,     0,     0,     0,     0,   320,
     0,     0,   320,   416,     0,   294,   320,     3,   119,   295,
     0,   296,   297,     0,   298,     0,     4,     0,   299,     0,
   300,   301,   120,     5,     6,     7,     8,     9,    10,   121,
   122,   123,   124,   125,   126,    11,     0,     0,     0,     0,
   127,   302,   128,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -173,  -173,  -173,  -173,     0,  -173,  -173,
  -173,  -173,  -173,  -173,  -173,  -173,   132,   133,   134,     0,
     0,  -173,  -173,     0,     0,     0,   303,     0,     0,     0,
     0,   263,  -173,   294,     0,     3,   119,   295,     0,   296,
   297,     0,   298,     0,     4,     0,   299,     0,   300,   301,
   120,     5,     6,     7,     8,     9,    10,   121,   122,   123,
   124,   125,   126,    11,     0,     0,     0,     0,   127,   302,
   128,     0,   195,   196,   197,   198,     0,   199,   200,   201,
   202,   203,   204,   205,   206,     0,     0,     0,   129,   130,
   207,   208,   131,     0,   132,   133,   134,     0,     0,   135,
   136,   386,     0,     0,   303,     0,     0,     0,     0,   263,
   357,   294,     0,     3,   119,   295,     0,   296,   297,     0,
   298,     0,     4,     0,   299,     0,   300,   301,   120,     5,
     6,     7,     8,     9,    10,   121,   122,   123,   124,   125,
   126,    11,     0,     3,     0,     0,   127,   302,   128,     0,
     0,     0,     4,     0,     0,     0,     0,     0,     0,     5,
     6,     7,     8,     9,    10,     0,   129,   130,     0,   119,
   131,    11,   132,   133,   134,     0,     0,   135,   136,     0,
     0,     0,   303,   120,     5,     0,     0,   263,     0,     0,
   121,   122,   123,   124,   125,   126,     0,     0,     0,     0,
     0,   127,     0,   128,   201,   202,   203,   204,   205,   206,
     0,     0,     0,     0,     0,   207,   208,     0,     0,     0,
     0,   129,   130,   119,     0,   131,     0,   132,   133,   134,
     0,     4,   135,   136,     0,     0,     0,   120,     5,     6,
     7,     8,   218,     0,   121,   122,   123,   124,   125,   126,
    11,     0,     0,     0,     0,   127,     0,   128,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   119,     0,     0,     0,     0,   129,   130,     0,     0,   131,
     0,   132,   133,   134,   120,     5,   135,   136,     0,     0,
     0,   121,   122,   123,   124,   125,   126,     0,     0,     0,
     0,     0,   127,     0,   128,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   119,     0,     0,
     0,     0,   129,   130,     0,     0,   131,     0,   132,   133,
   134,   120,     5,   135,   136,     0,     0,     0,   121,   122,
   123,   124,   125,   126,     0,     0,     0,     0,     0,   127,
     0,   128,     0,   195,   196,   197,   198,     0,   199,   200,
   201,   202,   203,   204,   205,   206,     0,     0,     0,   129,
   130,   207,   208,   131,     0,   132,   133,   354,     0,     0,
   135,   136,     0,     0,     0,   283,   195,   196,   197,   198,
     0,   199,   200,   201,   202,   203,   204,   205,   206,     0,
     0,     0,     0,     0,   207,   208,     0,     0,     0,     0,
     0,     0,     0,     0,   195,   196,   197,   198,   335,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
     0,     0,   207,   208,     0,     0,     0,     0,     0,     0,
     0,     0,   195,   196,   197,   198,   337,   199,   200,   201,
   202,   203,   204,   205,   206,     0,     0,     0,     0,     0,
   207,   208,     0,   195,   196,   197,   198,   406,   199,   200,
   201,   202,   203,   204,   205,   206,     0,     0,     0,     0,
     0,   207,   208,     0,   195,   196,   197,   198,   412,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
   245,     0,   207,   208,   195,   196,   197,   198,     0,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
   398,     0,   207,   208,   195,   196,   197,   198,     0,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
   400,     0,   207,   208,   195,   196,   197,   198,     0,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
   409,     0,   207,   208,   195,   196,   197,   198,     0,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
   423,     0,   207,   208,   195,   196,   197,   198,     0,   199,
   200,   201,   202,   203,   204,   205,   206,     0,     0,     0,
     0,     0,   207,   208
};

static const short yycheck[] = {     1,
    93,     1,    19,   218,    23,    25,    18,    19,     1,     1,
    12,    13,    58,    24,    24,    18,    19,   101,    20,    16,
    53,    13,    13,   236,    74,   118,    38,    86,    20,    20,
    32,   115,    74,    70,   118,    38,    78,     1,    65,    13,
    19,    43,   306,    24,   103,    82,    20,    80,    60,    76,
    52,    53,    52,    55,    51,    19,    58,    60,    53,    52,
    52,    81,    79,    55,    55,    67,    77,   113,    70,   282,
    72,   284,    74,    74,    76,   288,    76,    80,   291,    81,
    72,    55,   166,    76,    76,    80,    71,    60,    61,    81,
   212,    93,    53,    74,    67,    68,    77,    99,    72,   101,
    76,    93,   224,    64,    71,   227,    53,    81,    24,   101,
   112,   326,    64,   115,   116,     1,   118,    64,    71,    80,
   112,    18,   386,   115,    18,   127,   118,    18,    19,   131,
   132,    74,   134,    80,   398,   127,   400,   221,   112,   261,
    53,    18,   134,    75,   131,   132,    32,    33,    34,    35,
    74,    64,   274,   417,   276,    74,   420,   279,    74,    78,
   424,    77,    65,    60,   166,    62,    60,    80,    62,    60,
    53,    62,   406,    76,   166,   177,    18,   179,   412,    64,
   182,    64,   395,    60,    18,    62,    65,   421,    74,    75,
   177,    77,   179,    18,     1,   182,     3,    76,    74,    18,
    19,    77,    18,    19,    18,    12,   328,   209,   210,   331,
    64,   213,    19,    20,    21,    22,    23,    24,    60,   221,
    62,   213,   209,   210,    31,    32,    33,    34,    35,   221,
    74,    18,    19,    77,    41,    60,    18,    62,   240,   241,
   242,    60,    64,    62,    60,    74,    62,     1,    71,     3,
    70,    38,     1,   240,   241,   242,    67,    68,    12,    65,
    80,   263,    82,    76,    92,    19,    20,    21,    22,    23,
    24,    78,    79,    60,    76,    77,   263,    31,    32,    33,
    34,    35,    70,    32,    33,    34,    35,    41,    81,    18,
    19,    18,    19,    76,   387,    78,   298,    76,   298,    78,
   302,   129,   130,   305,   306,   133,   134,   135,   136,    38,
   356,    38,    60,   305,    62,   302,    64,    18,    19,   306,
    64,    64,    77,    64,    78,    79,    70,    70,   330,    65,
    64,    60,    80,    60,    12,     4,    80,    80,    82,    82,
   342,    19,    20,    21,    22,    65,   348,    65,   348,    60,
   178,    62,   354,    31,    65,   342,    25,    26,    27,    28,
    29,    30,   354,    41,    80,    65,    70,   195,   196,   197,
   198,   199,   200,   201,   202,   203,   204,   205,   206,    71,
    18,    53,   384,    65,   386,    65,    74,   215,    74,    65,
   218,    76,   220,    18,    64,    12,   398,   384,   400,   386,
    70,    64,    19,    20,    21,    22,    65,   235,    75,   237,
    80,   398,    82,   400,    31,   417,   244,    77,   420,   406,
    64,    43,   424,    65,    41,   412,    70,    64,    44,    74,
   417,     3,    65,   420,   421,   263,    80,   424,    82,    65,
    12,     0,     1,    74,     3,    65,    65,    19,    20,    21,
    22,    23,    24,    12,    81,    64,    64,    18,    76,    31,
    19,    20,    21,    22,    23,    24,    45,    46,    47,    48,
    74,   299,    31,    64,    53,   303,    65,    73,   306,     0,
     0,    40,    41,    70,     1,     1,     3,     4,     5,   213,
     7,     8,    64,    10,    76,    12,   324,    14,     1,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    95,    97,   345,    -1,    36,
    37,    38,    12,   351,   412,   343,   354,   267,   421,    19,
    20,    21,    22,   361,   362,   363,   364,   365,   346,    56,
    57,    31,    -1,    60,    -1,    62,    63,    64,    -1,    -1,
    67,    68,    -1,    -1,   382,    72,    -1,    -1,   386,    -1,
    77,    78,    -1,    -1,    -1,   393,    -1,    -1,   396,    -1,
   398,    -1,   400,    -1,    -1,    -1,    -1,    -1,   406,    -1,
    -1,    -1,   410,    -1,   412,    -1,    -1,    -1,    -1,   417,
    -1,    -1,   420,   421,    -1,     1,   424,     3,     4,     5,
    -1,     7,     8,    -1,    10,    -1,    12,    -1,    14,    -1,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    -1,
    36,    37,    38,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    49,    50,    51,    52,    -1,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    -1,
    -1,    67,    68,    -1,    -1,    -1,    72,    -1,    -1,    -1,
    -1,    77,    78,     1,    -1,     3,     4,     5,    -1,     7,
     8,    -1,    10,    -1,    12,    -1,    14,    -1,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    37,
    38,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    56,    57,
    67,    68,    60,    -1,    62,    63,    64,    -1,    -1,    67,
    68,    78,    -1,    -1,    72,    -1,    -1,    -1,    -1,    77,
    78,     1,    -1,     3,     4,     5,    -1,     7,     8,    -1,
    10,    -1,    12,    -1,    14,    -1,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
    30,    31,    -1,     3,    -1,    -1,    36,    37,    38,    -1,
    -1,    -1,    12,    -1,    -1,    -1,    -1,    -1,    -1,    19,
    20,    21,    22,    23,    24,    -1,    56,    57,    -1,     4,
    60,    31,    62,    63,    64,    -1,    -1,    67,    68,    -1,
    -1,    -1,    72,    18,    19,    -1,    -1,    77,    -1,    -1,
    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
    -1,    36,    -1,    38,    56,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,
    -1,    56,    57,     4,    -1,    60,    -1,    62,    63,    64,
    -1,    12,    67,    68,    -1,    -1,    -1,    18,    19,    20,
    21,    22,    77,    -1,    25,    26,    27,    28,    29,    30,
    31,    -1,    -1,    -1,    -1,    36,    -1,    38,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     4,    -1,    -1,    -1,    -1,    56,    57,    -1,    -1,    60,
    -1,    62,    63,    64,    18,    19,    67,    68,    -1,    -1,
    -1,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
    -1,    -1,    36,    -1,    38,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,     4,    -1,    -1,
    -1,    -1,    56,    57,    -1,    -1,    60,    -1,    62,    63,
    64,    18,    19,    67,    68,    -1,    -1,    -1,    25,    26,
    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,
    -1,    38,    -1,    49,    50,    51,    52,    -1,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    56,
    57,    67,    68,    60,    -1,    62,    63,    64,    -1,    -1,
    67,    68,    -1,    -1,    -1,    81,    49,    50,    51,    52,
    -1,    54,    55,    56,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    49,    50,    51,    52,    81,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    -1,    67,    68,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    49,    50,    51,    52,    81,    54,    55,    56,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    -1,
    67,    68,    -1,    49,    50,    51,    52,    74,    54,    55,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    -1,    67,    68,    -1,    49,    50,    51,    52,    74,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    65,    -1,    67,    68,    49,    50,    51,    52,    -1,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    65,    -1,    67,    68,    49,    50,    51,    52,    -1,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    65,    -1,    67,    68,    49,    50,    51,    52,    -1,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    65,    -1,    67,    68,    49,    50,    51,    52,    -1,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    65,    -1,    67,    68,    49,    50,    51,    52,    -1,    54,
    55,    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    -1,    67,    68
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
		/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif


#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif


#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
   int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 108 "minic++.y"
{ progTree.head->node1=yyvsp[0].node; ;
    break;}
case 2:
#line 112 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::prog_decls); ;
    break;}
case 3:
#line 113 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::prog_decls,yyvsp[-1].node,yyvsp[0].node); ;
    break;}
case 4:
#line 114 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::prog_decls_error);;
    break;}
case 5:
#line 119 "minic++.y"
{  ;
    break;}
case 6:
#line 120 "minic++.y"
{  ;
    break;}
case 7:
#line 121 "minic++.y"
{ ;
    break;}
case 8:
#line 122 "minic++.y"
{;
    break;}
case 9:
#line 123 "minic++.y"
{  ;
    break;}
case 10:
#line 124 "minic++.y"
{  ;
    break;}
case 11:
#line 125 "minic++.y"
{ ;
    break;}
case 12:
#line 126 "minic++.y"
{  ;
    break;}
case 13:
#line 127 "minic++.y"
{ ;
    break;}
case 14:
#line 142 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_def,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 15:
#line 143 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::class_def,yyvsp[-4].node,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 16:
#line 144 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::class_def,yyvsp[-3].node,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);
	 ErrorReport::printError(yylsp[-3].first_line,yylsp[-3].first_column,"missing :\n");	 ;
    break;}
case 17:
#line 149 "minic++.y"
{yyval.node=yyvsp[0].node;;
    break;}
case 18:
#line 153 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_public);;
    break;}
case 19:
#line 154 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_protected);;
    break;}
case 20:
#line 155 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_private);;
    break;}
case 21:
#line 156 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_friend);;
    break;}
case 22:
#line 157 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::access_spec,NULL,NULL,NULL,NULL,NULL,Type::access_public);
				ErrorReport::printError(yylsp[0].first_line,yylsp[0].first_column,"unknown access specification :\n");	 ;
    break;}
case 24:
#line 163 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_base_list,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 25:
#line 164 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::name_error);;
    break;}
case 26:
#line 168 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_body);;
    break;}
case 27:
#line 169 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::class_body,yyvsp[-2].node);;
    break;}
case 28:
#line 173 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::class_body_stmts,yyvsp[0].node);;
    break;}
case 29:
#line 174 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_body_stmts,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 30:
#line 178 "minic++.y"
{yyval.node=yyvsp[-1].node;
    break;}
case 36:
#line 184 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_body_stmt);;
    break;}
case 37:
#line 185 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_body_stmt);;
    break;}
case 38:
#line 193 "minic++.y"
{	yyval.node=new TreeRecord(yylsp[-4],NodeName::class_constructor_decl,yyvsp[-4].node,yyvsp[-2].node);;
    break;}
case 39:
#line 198 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::class_constructor,yyvsp[-7].node,yyvsp[-5].node,yyvsp[-3].node,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 40:
#line 201 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::class_constructor_init_list);;
    break;}
case 41:
#line 202 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_constructor_init_list,yyvsp[0].node);;
    break;}
case 42:
#line 203 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::class_constructor_init_list,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 43:
#line 208 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::c_c_init_list,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node);;
    break;}
case 44:
#line 209 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::c_c_init_list,yyvsp[-5].node,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node);;
    break;}
case 45:
#line 213 "minic++.y"
{	yyval.node=new TreeRecord(yylsp[-4],NodeName::class_destructor_decl,yyvsp[-3].node);;
    break;}
case 46:
#line 217 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_decl,yyvsp[-1].node);;
    break;}
case 47:
#line 221 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::func_decl,yyvsp[-6].node,yyvsp[-5].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node);;
    break;}
case 48:
#line 223 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::func_decl,yyvsp[-5].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node);	;
    break;}
case 49:
#line 225 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::func_decl,yyvsp[-7].node,yyvsp[-6].node,new TreeRecord(yylsp[-5],yyvsp[-5].ids),yyvsp[-3].node,new TreeRecord(yylsp[-1],"CONST"));;
    break;}
case 50:
#line 227 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::func_decl,yyvsp[-6].node,new TreeRecord(yylsp[-5],yyvsp[-5].ids),yyvsp[-3].node,new TreeRecord(yylsp[-1],"CONST"));;
    break;}
case 51:
#line 232 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_static);;
    break;}
case 52:
#line 233 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_const);;
    break;}
case 53:
#line 234 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_extern);;
    break;}
case 54:
#line 236 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_static_const);;
    break;}
case 55:
#line 238 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::storage_spec,NULL,NULL,NULL,NULL,NULL,Type::storage_static_const);;
    break;}
case 56:
#line 241 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::func_decl_args);;
    break;}
case 57:
#line 242 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::func_decl_args,yyvsp[0].node);;
    break;}
case 59:
#line 256 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::func_decl_arg_list,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 60:
#line 260 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::func_decl_arg_elem,yyvsp[0].node);;
    break;}
case 61:
#line 261 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::func_decl_arg_elem,yyvsp[-1].node,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 62:
#line 262 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::func_decl_arg_elem,yyvsp[-3].node,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 65:
#line 284 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::func_def_inline,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 66:
#line 285 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::func_def_inline,yyvsp[0].node);;
    break;}
case 67:
#line 289 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::func_def_normal,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 68:
#line 290 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::func_def_normal,yyvsp[0].node);;
    break;}
case 69:
#line 295 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::func_def_common,yyvsp[-5].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 70:
#line 297 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::func_def_common,yyvsp[-6].node,new TreeRecord(yylsp[-5],yyvsp[-5].ids),yyvsp[-3].node,new TreeRecord(yylsp[-1],"CONST"),yyvsp[0].node);;
    break;}
case 73:
#line 315 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_func_def_inline,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 74:
#line 316 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_func_def_inline,yyvsp[0].node);;
    break;}
case 75:
#line 320 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::class_func_def_normal,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 76:
#line 321 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::class_func_def_normal,yyvsp[0].node);;
    break;}
case 77:
#line 326 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::class_func_def_common,yyvsp[-7].node,yyvsp[-6].node,new TreeRecord(yylsp[-4],yyvsp[-4].ids),yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 79:
#line 333 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::stmts,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 82:
#line 341 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::stmt_error);;
    break;}
case 83:
#line 342 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::stmt_error);;
    break;}
case 86:
#line 352 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::expr_stmt,yyvsp[0].node);;
    break;}
case 91:
#line 360 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::var_decl,yyvsp[-2].node,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 92:
#line 361 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::var_decl,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 93:
#line 366 "minic++.y"
{ yyval.node=new TreeRecord(yylsp[0],NodeName::var_list_elem,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 94:
#line 368 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::var_list_elem,new TreeRecord(yylsp[-1],yyvsp[-1].ids),yyvsp[0].node);;
    break;}
case 95:
#line 370 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::var_list_elem,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 96:
#line 372 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::var_list_elem,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 98:
#line 388 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::var_list,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 99:
#line 390 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::var_constructor_call,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node);;
    break;}
case 101:
#line 403 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::array_dims,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 102:
#line 407 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::array_dim);;
    break;}
case 103:
#line 408 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_dim,new TreeRecord(yylsp[-1],yyvsp[-1].ids));;
    break;}
case 104:
#line 413 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list,yyvsp[-1].node);;
    break;}
case 105:
#line 414 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list,yyvsp[-1].node);;
    break;}
case 106:
#line 418 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::array_init_list_consts,yyvsp[0].node);;
    break;}
case 107:
#line 419 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list_consts,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 108:
#line 423 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::array_init_list_lists,yyvsp[0].node);;
    break;}
case 109:
#line 424 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_init_list_lists,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 110:
#line 434 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::class_static_init_var,yyvsp[-5].node,yyvsp[-4].node,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 111:
#line 445 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::class_destructor,yyvsp[-6].node,yyvsp[-3].node,yyvsp[0].node);;
    break;}
case 112:
#line 449 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_NORMAL);;
    break;}
case 113:
#line 450 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_PLUS);;
    break;}
case 114:
#line 451 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_MINUS);;
    break;}
case 115:
#line 452 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_DIV);;
    break;}
case 116:
#line 453 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::assignment,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::ASSIGN_MULT);;
    break;}
case 117:
#line 460 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::proc_call,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,NULL,Type::proc_call_normal);;
    break;}
case 118:
#line 462 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,new TreeRecord(yylsp[-5],yyvsp[-5].ids),new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,Type::PROC_CLASS_CALL);;
    break;}
case 119:
#line 464 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,NULL,Type::PROC_THIS_CALL);;
    break;}
case 120:
#line 466 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,yyvsp[-5].node,new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,Type::PROC_CLASS_STATIC_CALL);;
    break;}
case 121:
#line 468 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-5],NodeName::proc_call,new TreeRecord(yylsp[-5],yyvsp[-5].ids),new TreeRecord(yylsp[-3],yyvsp[-3].ids),yyvsp[-1].node,NULL,NULL,Type::PROC_ARROW_CALL);;
    break;}
case 122:
#line 472 "minic++.y"
{yyval.node=new TreeRecord(yylsp[1],NodeName::proc_expr_list);;
    break;}
case 123:
#line 473 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::proc_expr_list,yyvsp[0].node);;
    break;}
case 124:
#line 476 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::proc_expr_list_not_empty,yyvsp[0].node);;
    break;}
case 125:
#line 477 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::proc_expr_list_not_empty,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 126:
#line 482 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::jump_stmt,NULL,NULL,NULL,NULL,NULL,Type::break_type);;
    break;}
case 127:
#line 483 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::jump_stmt,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::return_expr_type);;
    break;}
case 128:
#line 484 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::jump_stmt,NULL,NULL,NULL,NULL,NULL,Type::continue_type);;
    break;}
case 129:
#line 485 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::jump_stmt,NULL,NULL,NULL,NULL,NULL,Type::return_type);;
    break;}
case 130:
#line 489 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cin_stmt,yyvsp[0].node);;
    break;}
case 132:
#line 494 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cin_stmt_input_list,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 133:
#line 497 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::input_elem,yyvsp[0].node);;
    break;}
case 134:
#line 501 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cout_stmt,yyvsp[0].node);;
    break;}
case 136:
#line 507 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::cout_stmt_output_list,yyvsp[-1].node,yyvsp[0].node);;
    break;}
case 137:
#line 510 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::output_elem,yyvsp[0].node);;
    break;}
case 141:
#line 518 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::compound_block_stmt,yyvsp[0].node);;
    break;}
case 142:
#line 523 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::block_stmt);;
    break;}
case 143:
#line 525 "minic++.y"
{ yyval.node=new TreeRecord(yylsp[-2],NodeName::block_stmt,yyvsp[-1].node);;
    break;}
case 144:
#line 529 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::if_stmt,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 145:
#line 530 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-6],NodeName::if_else_stmt,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 146:
#line 531 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::if_stmt,yyvsp[-2].node,yyvsp[0].node);
			ErrorReport::printError(yylsp[-3].last_line,yylsp[-3].last_column,"missing ( :\n");;
    break;}
case 147:
#line 540 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-8],NodeName::for_stmt,yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 148:
#line 541 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-7],NodeName::for_stmt,yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].node);
		ErrorReport::printError(yylsp[-6].first_line,yylsp[-6].first_column,"missing ( :\n");;
    break;}
case 149:
#line 550 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::for_itr,yyvsp[0].node);;
    break;}
case 150:
#line 551 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::for_itr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 151:
#line 555 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::for_itr_elem_expr,yyvsp[0].node);;
    break;}
case 153:
#line 561 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::while_stmt,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 156:
#line 571 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_int);;
    break;}
case 157:
#line 572 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_double);;
    break;}
case 158:
#line 573 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_bool);;
    break;}
case 159:
#line 574 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_char);;
    break;}
case 160:
#line 575 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::simple_type,NULL,NULL,NULL,NULL,NULL,Type::type_void);;
    break;}
case 164:
#line 592 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::pointer_type,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::pointer_type);;
    break;}
case 165:
#line 595 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::reference_type,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::reference_type);;
    break;}
case 173:
#line 606 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::bracket_expr,yyvsp[-1].node);;
    break;}
case 174:
#line 616 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::int_const_expr,yyvsp[0].ids,Type::type_int);;
    break;}
case 175:
#line 617 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::double_const_expr,yyvsp[0].ids,Type::type_double);;
    break;}
case 176:
#line 618 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::char_const_expr,yyvsp[0].ids,Type::type_char);;
    break;}
case 177:
#line 619 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::str_const_expr,yyvsp[0].ids,Type::type_str);;
    break;}
case 178:
#line 620 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::false_const_expr,yyvsp[0].ids,Type::type_false);;
    break;}
case 179:
#line 621 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::true_const_expr,yyvsp[0].ids,Type::type_true);;
    break;}
case 180:
#line 622 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::null_const_expr,yyvsp[0].ids,Type::type_null);;
    break;}
case 182:
#line 629 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_class_expr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 183:
#line 630 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_pointer_expr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 185:
#line 632 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::id_name_expr,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 186:
#line 633 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],NodeName::this_expr);;
    break;}
case 187:
#line 634 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::class_var_expr,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 188:
#line 636 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::scope_expr,yyvsp[-2].node,new TreeRecord(yylsp[0],yyvsp[0].ids));;
    break;}
case 189:
#line 638 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::id_arrow_expr,new TreeRecord(yylsp[-2],yyvsp[-2].ids),yyvsp[0].node);;
    break;}
case 190:
#line 639 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::this_arrow_expr,yyvsp[0].node);;
    break;}
case 191:
#line 648 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::array_expr,new TreeRecord(yylsp[-1],yyvsp[-1].ids),yyvsp[0].node);;
    break;}
case 192:
#line 651 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::array_expr_dims,yyvsp[-1].node);;
    break;}
case 193:
#line 652 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::array_expr_dims,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 194:
#line 656 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::pointer_val_expr,yyvsp[0].node);;
    break;}
case 195:
#line 661 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::NOT);;
    break;}
case 196:
#line 662 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::MINUS);;
    break;}
case 197:
#line 663 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::left_icr);;
    break;}
case 198:
#line 664 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::right_icr);;
    break;}
case 199:
#line 665 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::left_decr);;
    break;}
case 200:
#line 666 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[-1].node,NULL,NULL,NULL,NULL,Type::right_decr);;
    break;}
case 201:
#line 667 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::and);;
    break;}
case 202:
#line 668 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::unary_expr,yyvsp[0].node,NULL,NULL,NULL,NULL,Type::PLUS);;
    break;}
case 205:
#line 677 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::PLUS);;
    break;}
case 206:
#line 678 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::MINUS);;
    break;}
case 207:
#line 679 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::DIV);;
    break;}
case 208:
#line 680 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::math_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::MULT);;
    break;}
case 209:
#line 685 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::LESS);;
    break;}
case 210:
#line 686 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::GREATER);;
    break;}
case 211:
#line 687 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::LEQ);;
    break;}
case 212:
#line 688 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::GEQ);;
    break;}
case 213:
#line 689 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::EQL);;
    break;}
case 214:
#line 690 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::NEQ);;
    break;}
case 215:
#line 691 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::oror);;
    break;}
case 216:
#line 692 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-2],NodeName::logical_operation_expr,yyvsp[-2].node,yyvsp[0].node,NULL,NULL,NULL,Type::andand);;
    break;}
case 218:
#line 700 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::new_array_expr,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 219:
#line 701 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-4],NodeName::new_expr,yyvsp[-3].node,yyvsp[-1].node);;
    break;}
case 220:
#line 712 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-1],NodeName::delete_stmt,yyvsp[0].node);;
    break;}
case 221:
#line 713 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::delete_stmt,yyvsp[0].node);;
    break;}
case 222:
#line 716 "minic++.y"
{yyval.node=new TreeRecord(yylsp[-3],NodeName::cast_expr,yyvsp[-2].node,yyvsp[0].node);;
    break;}
case 223:
#line 766 "minic++.y"
{yyval.node=new TreeRecord(yylsp[0],yyvsp[0].ids,NULL,NULL,NULL,NULL,NULL,Type::class_type);;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 769 "minic++.y"




int yyerror (char *s)
{
  fprintf (stderr, "%s\n", s);
  return 0;
}

/* i have no idea what this function does, but the VC++ gives me a linker error from the
	lexer, so i defined it.
	when i returned 1 i got syntax errors when i execute the generated compier
	and 0 it gives right result at run time????????????????????????????
*/
int isatty(int x){
	return 0;
}

/* initila adding to symbol table 
Record* add2symtab(char* name){
	return symtab.addRecord(Record(name,cur_par->depth+1,cur_par));
}

// restoring parent scopes must be done acurately or things won't work right 
void restorePar(){
	cur_par=cur_par->parent;
}
*/

char* concat(char* first, char* second){
	int flen=strlen(first);
	int slen=strlen(second);
	
	strncpy(name_buffer,first,flen);
	name_buffer[flen]='\0';
	strncat(name_buffer,second,slen);
	name_buffer[flen+slen]='\0';
	
	return name_buffer;
}